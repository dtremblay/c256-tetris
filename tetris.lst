
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass.exe --long-address -x --intel-hex -o tetris.hex --list tetris.lst tetris.asm
; Sun Apr 26 23:37:09 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: tetris.asm


;******  Processing file: macros_inc.asm


;******  Return to file: tetris.asm


;******  Processing file: bank_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008 ; This Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036 ;
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2 Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_ORDER_NUM    = $000048 ; 2 Bytes
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004e				RAD_TEMP         = $00004E
=$000050				RAD_EFFECT       = $000050
=$000051				SDOS_FILE_REC_PTR= $000051 ; 3 byte pointer to a simple file struct
=$000054				SDOS_LOOP        = $000054 ; variable to count file length
=$000055				SDOS_FILE_SIZE   = $000055 ; 4 bytes for the file length
>0060	00				MIDI_COUNTER    .byte 0
>0061	00				MIDI_REG        .byte 0
>0062	00				MIDI_CTRL       .byte 0
>0063	00				MIDI_CHANNEL    .byte 0
>0064	00				MIDI_DATA1      .byte 0
>0065	00				MIDI_DATA2      .byte 0
>0066	00				TIMING_CNTR     .byte 0
>0067	00 00 00			INSTR_ADDR      .fill 3,0
>006a	17 00				INSTR_NUMBER    .byte $17, 0
>006c	01				LINE_NUM_HEX    .byte 1
>006d	01				TAB_COUNTER     .byte 1
>006e	01				REM_LINES       .byte 1
>006f	01				DEC_MEM         .byte 1
>0070	00 00 00			PTRN_ADDR       .long 0
>0073	00 00 00			LINE_ADDR       .long 0
>0076	00				CONV_VAL        .byte 0
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				RAD_ADDR         = $0000F0 ; 3 bytes to avoid OPL2 errors.
=$0000f3				RAD_PATTRN       = $0000F3 ; 1 bytes - offset to patter
=$0000f4				RAD_PTN_DEST     = $0000F4 ; 3 bytes - where to write the pattern data
=$0000f7				RAD_CHANNEL      = $0000F7 ; 2 bytes - 0 to 8
=$0000f9				RAD_LAST_NOTE    = $0000F9 ; 1 if this is the last note
=$0000fa				RAD_LINE_PTR     = $0000FA ; 2 bytes - offset to memory location
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$00031f				SDOS_LINE_SELECT = $00031F ; used by the file menu to track which item is selected (0-37)
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars for the file path
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000				VECTORS_END      = $200000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: tetris.asm


;******  Processing file: vicky_def.asm

=$af0000				MASTER_CTRL_REG_L       = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$af0004				BORDER_CTRL_REG         = $AF0004   ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$01					Border_Ctrl_Enable      = $01
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008   ; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009   ; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af0018				TXT_CLR_START_DISPLAY_PTR = $AF0018  ; (0 to 255) (this Add a X Offset to the Display Start Address)
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR         = $AF1F80
=$af2000				GRPH_LUT0_PTR           = $AF2000
=$af2400				GRPH_LUT1_PTR           = $AF2400
=$af2800				GRPH_LUT2_PTR           = $AF2800
=$af2c00				GRPH_LUT3_PTR           = $AF2C00
=$af3000				GRPH_LUT4_PTR           = $AF3000
=$af3400				GRPH_LUT5_PTR           = $AF3400
=$af3800				GRPH_LUT6_PTR           = $AF3800
=$af3c00				GRPH_LUT7_PTR           = $AF3C00
=$af4000				GAMMA_B_LUT_PTR         = $AF4000
=$af4100				GAMMA_G_LUT_PTR         = $AF4100
=$af4200				GAMMA_R_LUT_PTR         = $AF4200
=$af5000				TILE_MAP0               = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: tetris.asm


;******  Processing file: interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG3     = $000147 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: tetris.asm


;******  Processing file: io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808				SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809				SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810				SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820				CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821				CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822				CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: tetris.asm


;******  Processing file: kernel_inc.asm

=$001000				BOOT             = $001000 ; Cold boot routine
=$001004				RESTORE          = $001004 ; Warm boot routine
=$001008				BREAK            = $001008 ; End program and return to command prompt
=$00100c				READY            = $00100C ; Print prompt and wait for keyboard input
=$001010				SCINIT           = $001010 ;
=$001014				IOINIT           = $001014 ;
=$001018				PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				PUTS             = $00101C ; Print a string to the currently selected channel
=$001020				PUTB             = $001020 ; Output a byte to the currently selected channel
=$001024				PUTBLOCK         = $001024 ; Ouput a binary block to the currently selected channel
=$001028				SETLFS           = $001028 ; Obsolete (done in OPEN)
=$00102c				SETNAM           = $00102C ; Obsolete (done in OPEN)
=$001030				OPEN             = $001030 ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
=$001034				CLOSE            = $001034 ; Close a channel
=$001038				SETIN            = $001038 ; Set the current input channel
=$00103c				SETOUT           = $00103C ; Set the current output channel
=$001040				GETB             = $001040 ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
=$001044				GETBLOCK         = $001044 ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
=$001048				GETCH            = $001048 ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
=$00104c				GETCHW           = $00104C ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001050				GETCHE           = $001050 ; Get a character from the input channel and echo to the screen. Wait if data is not ready.
=$001054				GETS             = $001054 ; Get a string from the input channel. NULL terminates
=$001058				GETLINE          = $001058 ; Get a line of text from input channel. CR or NULL terminates.
=$00105c				GETFIELD         = $00105C ; Get a field from the input channel. Value in A, CR, or NULL terminates
=$001060				TRIM             = $001060 ; Removes spaces at beginning and end of string.
=$001064				PRINTC           = $001064 ; Print character to screen. Handles terminal commands
=$001068				PRINTS           = $001068 ; Print string to screen. Handles terminal commands
=$00106c				PRINTCR          = $00106C ; Print Carriage Return
=$001070				PRINTF           = $001070 ; Print a float value
=$001074				PRINTI           = $001074 ; Prints integer value in TEMP
=$001078				PRINTH           = $001078 ; Print Hex value in DP variable
=$00107c				PRINTAI          = $00107C ; Prints integer value in A
=$001080				PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				LOCATE           = $001084 ;
=$001088				PUSHKEY          = $001088 ;
=$00108c				PUSHKEYS         = $00108C ;
=$001090				CSRRIGHT         = $001090 ;
=$001094				CSRLEFT          = $001094 ;
=$001098				CSRUP            = $001098 ;
=$00109c				CSRDOWN          = $00109C ;
=$0010a0				CSRHOME          = $0010A0 ;
=$0010a4				SCROLLUP         = $0010A4 ; Scroll the screen up one line. Creates an empty line at the bottom.
=$0010a8				CLRSCREEN        = $0010A8 ; Clear the screen
=$0010ac				INITCHLUT        = $0010AC ; Init character look-up table
=$0010b0				INITSUPERIO      = $0010B0 ; Init Super-IO chip
=$0010b4				INITKEYBOARD     = $0010B4 ; Init keyboard
=$0010bc				INITCURSOR       = $0010BC ; Init the Cursors registers
=$0010c0				INITFONTSET      = $0010C0 ; Init the Internal FONT Memory
=$0010c4				INITGAMMATABLE   = $0010C4 ; Init the RGB GAMMA Look Up Table
=$0010c8				INITALLLUT       = $0010C8 ; Init the Graphic Engine (Bitmap/Tile/Sprites) LUT
=$0010cc				INITVKYTXTMODE   = $0010CC ; Init the Text Mode @ Reset Time
=$0010d0				INITVKYGRPMODE   = $0010D0 ; Init the Basic Registers for the Graphic Mode
=$0010f0				F_OPEN           = $0010F0 ; open a file for reading/writing/creating
=$0010f4				F_CREATE         = $0010F4 ; create a new file
=$0010f8				F_CLOSE          = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				F_WRITE          = $0010FC ; write the current cluster to the file
=$001100				F_READ           = $001100 ; read the next cluster from the file
=$001104				F_DELETE         = $001104 ; delete a file / directory
=$001108				F_DIROPEN        = $001108 ; open a directory and seek the first directory entry
=$00110c				F_DIRNEXT        = $00110C ; seek to the next directory of an open directory
=$001110				F_DIRREAD        = $001110 ; Read the directory entry for the specified file
=$001114				F_DIRWRITE       = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				F_LOAD           = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				F_SAVE           = $00111C ; Save memory to a binary file

;******  Return to file: tetris.asm


;******  Processing file: math_def.asm

=$000100				UNSIGNED_MULT_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				UNSIGNED_MULT_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				UNSIGNED_MULT_RESULT= $000104 ;4 Bytes Result of A x B
=$000108				SIGNED_MULT_A       = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				SIGNED_MULT_B       = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				SIGNED_MULT_RESULT  = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Signed divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  B/A
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in B/A
=$000114				D0_RESULT        = $000114 ;2 Bytes Signed quotient result of B/A ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Signed remainder of B/A ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Unsigned divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result

;******  Return to file: tetris.asm


;******  Processing file: GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: tetris.asm


;******  Processing file: base.asm

.38ff00	18		clc		                CLC
.38ff01	fb		xce		                XCE   ; go into native mode
.38ff02	78		sei		                SEI   ; ignore interrupts
.38ff03	5c b7 00 16	jmp $1600b7	                JML GAME_START
.38ff60					RHIRQ
.38ff60	8b		phb		                PHB
.38ff61	0b		phd		                PHD
.38ff62	48		pha		                PHA
.38ff63	da		phx		                PHX
.38ff64	5a		phy		                PHY
.38ff65	22 00 00 16	jsl $160000	                JSL IRQ_HANDLER
.38ff69	7a		ply		                PLY
.38ff6a	fa		plx		                PLX
.38ff6b	68		pla		                PLA
.38ff6c	2b		pld		                PLD
.38ff6d	ab		plb		                PLB
.38ff6e	40		rti		                RTI
.38ffe0	5c b7 00 16	jmp $1600b7	JUMP_READY      JML GAME_START ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ     ; FFEE
.38fff0	5c b7 00 16	jmp $1600b7	RRETURN         JML GAME_START
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: tetris.asm


;******  Processing file: keyboard_def.asm

=$af1064				STATUS_PORT           = $AF1064
=$af1060				KBD_OUT_BUF           = $AF1060
=$af1060				KBD_INPT_BUF          = $AF1060
=$af1064				KBD_CMD_BUF           = $AF1064
=$af1060				KBD_DATA_BUF          = $AF1060
=$af1060				PORT_A                = $AF1060
=$af1061				PORT_B                = $AF1061
=$01					OUT_BUF_FULL          = $01
=$02					INPT_BUF_FULL         = $02
=$04					SYS_FLAG              = $04
=$08					CMD_DATA              = $08
=$10					KEYBD_INH             = $10
=$20					TRANS_TMOUT           = $20
=$40					RCV_TMOUT             = $40
=$80					PARITY_EVEN           = $80
=$10					INH_KEYBOARD          = $10
=$ae					KBD_ENA               = $AE
=$ad					KBD_DIS               = $AD
=$f1					KB_MENU               = $F1
=$f4					KB_ENABLE             = $F4
=$f7					KB_MAKEBREAK          = $F7
=$fe					KB_ECHO               = $FE
=$ff					KB_RESET              = $FF
=$ed					KB_LED_CMD            = $ED
=$aa					KB_OK                 = $AA
=$fa					KB_ACK                = $FA
=$ff					KB_OVERRUN            = $FF
=$fe					KB_RESEND             = $FE
=$f0					KB_BREAK              = $F0
=$10					KB_FA                 = $10
=$20					KB_FE                 = $20
=$40					KB_PR_LED             = $40
>0500					.align 256
>0500	00 00 00 00 00 00 00 00		ScanCode_Press_Set1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>0508	00 00 00 00 00 00 00 00
>0510	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>0518	00 00 00 00 00 00 00 00
>0520	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>0528	00 00 00 00 00 00 00 00
>0530	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00    ; $30
>0538	00 08 00 00 00 00 00 00
>0540	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $00, $04, $00, $00    ; $40
>0548	00 00 00 02 00 04 00 00
>0550	06 00 00 00 00 00 00 00		                      .text $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>0558	00 00 00 00 00 00 00 00
>0560	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>0568	00 00 00 00 00 00 00 00
>0570	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>0578	00 00 00 00 00 00 00 00

;******  Return to file: tetris.asm


;******  Processing file: interrupt_handler.asm

.160000					IRQ_HANDLER
.160000	48		pha		                PHA             ; begin setdp macro
.160001	08		php		                PHP
.160002	c2 20		rep #$20	                REP #$20        ; set A long
.160004	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.160007	5b		tcd		                TCD
.160008	28		plp		                PLP
.160009	68		pla		                PLA             ; end setdp macro
.16000a	a9 00		lda #$00	                LDA #0  ; set the data bank register to 0
.16000c	48		pha		                PHA
.16000d	ab		plb		                PLB
.16000e	e2 20		sep #$20	                SEP #$20        ; set A short
.160010	ad 40 01	lda $0140	                LDA INT_PENDING_REG0
.160013	f0 0f		beq $160024	                BEQ CHECK_PENDING_REG1
.160015	ad 40 01	lda $0140	                LDA INT_PENDING_REG0
.160018	29 01		and #$01	                AND #FNX0_INT00_SOF
.16001a	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.16001c	d0 06		bne $160024	                BNE END_CHECK
.16001e	8d 40 01	sta $0140	                STA INT_PENDING_REG0
.160021	20 79 00	jsr $160079	                JSR SOF_INTERRUPT
.160024					END_CHECK
.160024					CHECK_PENDING_REG1
.160024	e2 20		sep #$20	                SEP #$20        ; set A short
.160026	ad 41 01	lda $0141	                LDA INT_PENDING_REG1
.160029	f0 0f		beq $16003a	                BEQ CHECK_PENDING_REG2   ; BEQ EXIT_IRQ_HANDLE
.16002b	ad 41 01	lda $0141	                LDA INT_PENDING_REG1
.16002e	29 01		and #$01	                AND #FNX1_INT00_KBD
.160030	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.160032	d0 06		bne $16003a	                BNE END_CHECK
.160034	8d 41 01	sta $0141	                STA INT_PENDING_REG1
.160037	20 42 00	jsr $160042	                JSR KEYBOARD_INTERRUPT
.16003a					END_CHECK
.16003a					CHECK_PENDING_REG2
.16003a	e2 20		sep #$20	                SEP #$20        ; set A short
.16003c	ad 42 01	lda $0142	                LDA INT_PENDING_REG2
.16003f	f0 00		beq $160041	                BEQ EXIT_IRQ_HANDLE
.160041					EXIT_IRQ_HANDLE
.160041	6b		rtl		                RTL
.160042					KEYBOARD_INTERRUPT
.160042	a9 00		lda #$00	                LDA #0  ; clear B
.160044	eb		xba		                XBA
.160045	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.160049	8d 88 0f	sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.16004c	aa		tax		                TAX
.16004d	bd 00 05	lda $0500,x	                LDA ScanCode_Press_Set1,X
.160050	8f 84 00 16	sta $160084	                STA LAST_KEY
.160054	a2 00 a0	ldx #$a000	                LDX #$A000
.160057	86 17		stx $17		                STX CURSORPOS
.160059	a2 20 00	ldx #$0020	                LDX #$20
.16005c	86 1e		stx $1e		                STX CURCOLOR
.16005e	20 1d 05	jsr $16051d	                JSR DISPLAY_HEX
.160061	a9 00		lda #$00	                LDA #0
.160063	eb		xba		                XBA
.160064	af 84 00 16	lda $160084	                LDA LAST_KEY
.160068	aa		tax		                TAX
.160069	f0 03		beq $16006e	                BEQ DONT_REACT
.16006b	fc 6f 00	jsr ($16006f,x)	                JSR (KEY_JUMP_TABLE,X)
.16006e					    DONT_REACT
.16006e	60		rts		                RTS
.16006f					KEY_JUMP_TABLE
>16006f	bc 01				                .word <>INVALID_KEY
>160071	b4 02				                .word <>MOVE_PIECE_LEFT
>160073	de 02				                .word <>MOVE_PIECE_RIGHT
>160075	08 03				                .word <>MOVE_PIECE_DOWN
>160077	1a 03				                .word <>ROTATE_PIECE
.160079					SOF_INTERRUPT
.160079	af 94 00 16	lda $160094	                LDA GAME_STATE  ; The SOF is still getting called, even when masked
.16007d	d0 03		bne $160082	                BNE SKIP_SOF
.16007f	20 06 01	jsr $160106	                JSR DISPLAY_BOARD
.160082					    SKIP_SOF
.160082	60		rts		                RTS

;******  Return to file: tetris.asm

>160083	00				TICK_COUNT      .byte 0
>160084	00 00				LAST_KEY        .word 0
>160086	00				BOARDX          .byte 0
>160087	00				BOARDY          .byte 0
>160088	00				CURRENT_PIECE   .byte 0
>160089	06 00				PIECE_X         .word 6
>16008b	00 00				PIECE_Y         .word 0
>16008d	00				PIECE_ROT       .byte 0
>16008e	00				PIECE_FIT       .byte 0
>16008f	32				GAME_SPEED      .byte 50 ; how many ticks beteen bars falling
>160090	00				PIECE_CNTR      .byte 0  ; we increase the speed of the game for every 10 pieces
>160091	00 00 00			SCORE           .long 0  ; decimal formatted score
>160094	00				GAME_STATE      .byte 0  ; 0 - running, 1 - game over
>160095	01				LEVEL           .byte 1
=14					BOARD_WIDTH     = 14
=21					BOARD_HEIGHT    = 21
=43293					START_BOARD     = $A900 + (72-BOARD_WIDTH)/2
=25					PIECE_VALUE     = 25
=100					LINE_VALUE      = 100
=$60					MSG_ADDR        = $60
=$62					ROT_VAL         = $62
=$63					ROT_VAL2        = $63
>160096	30 31 32 33 34 35 36 37		HEX_VALUES      .text '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
>16009e	38 39 41 42 43 44 45 46
>1600a6	47 41 4d 45 20 4f 56 45		GAME_OVER_MSG   .text 'GAME OVER',0
>1600ae	52 00
>1600b0	53 43 4f 52 45 3a 00		SCORE_MSG       .text 'SCORE:',0
.1600b7					GAME_START
.1600b7	e2 20		sep #$20	                SEP #$20        ; set A short
.1600b9	c2 10		rep #$10	                REP #$10        ; set X long
.1600bb	a9 00		lda #$00	                LDA #0
.1600bd	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1600c0	20 43 05	jsr $160543	                JSR INIT_GAME
.1600c3	c2 20		rep #$20	                REP #$20        ; set A long
.1600c5	22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.1600c9	a9 06 00	lda #$0006	                LDA #6
.1600cc	8f 84 e8 af	sta $afe884	                STA GABE_RNG_SEED_LO ; set the max value from 0 to 6
.1600d0	8f 89 00 16	sta $160089	                STA PIECE_X
.1600d4	22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD
.1600d8	e2 20		sep #$20	                SEP #$20        ; set A short
.1600da	a9 00		lda #$00	                LDA #0
.1600dc	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1600df	22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1600e3	a9 fe		lda #$fe	                LDA #~( FNX0_INT00_SOF )
.1600e5	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1600e9	a9 fe		lda #$fe	                LDA #~( FNX1_INT00_KBD )
.1600eb	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.1600ef	a9 01		lda #$01	                LDA #1
.1600f1	8f 86 e8 af	sta $afe886	                STA GABE_RNG_CTRL
.1600f5	20 9a 01	jsr $16019a	                JSR PICK_NEXT_PIECE
.1600f8	58		cli		                CLI
.1600f9					    INFINITE_LOOP
.1600f9	ea		nop		                NOP
.1600fa	ea		nop		                NOP
.1600fb	ea		nop		                NOP
.1600fc	af 94 00 16	lda $160094	                LDA GAME_STATE
.160100	c9 02		cmp #$02	                CMP #2
.160102	f0 b3		beq $1600b7	                BEQ GAME_START
.160104	80 f3		bra $1600f9	                BRA INFINITE_LOOP
.160106					DISPLAY_BOARD
.160106	af 83 00 16	lda $160083	                LDA TICK_COUNT
.16010a	1a		inc a		                INC A
.16010b	8f 83 00 16	sta $160083	                STA TICK_COUNT
.16010f	c9 32		cmp #$32	                CMP #50
.160111	d0 0f		bne $160122	                BNE TIMING_DONE
.160113	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.160117	1a		inc a		                INC A
.160118	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.16011c	a9 00		lda #$00	                LDA #0
.16011e	8f 83 00 16	sta $160083	                STA TICK_COUNT
.160122					    TIMING_DONE
.160122	20 8b 03	jsr $16038b	                JSR DOES_PIECE_FIT
.160125	af 8e 00 16	lda $16008e	                LDA PIECE_FIT
.160129	f0 62		beq $16018d	                BEQ LOGIC_DONE
.16012b	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.16012f	3a		dec a		                DEC A
.160130	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.160134	d0 03		bne $160139	                BNE NOT_GAME_OVER
.160136	4c cb 04	jmp $1604cb	                JMP GAME_OVER
.160139					        NOT_GAME_OVER
.160139	20 39 03	jsr $160339	                JSR COPY_PIECE
.16013c	c2 20		rep #$20	                REP #$20        ; set A long
.16013e	18		clc		                CLC
.16013f	af 91 00 16	lda $160091	                LDA SCORE
.160143	69 19 00	adc #$0019	                ADC #PIECE_VALUE
.160146	8f 91 00 16	sta $160091	                STA SCORE
.16014a	e2 20		sep #$20	                SEP #$20        ; set A short
.16014c	90 09		bcc $160157	                BCC NG_CONTINUE
.16014e	af 93 00 16	lda $160093	                LDA SCORE+2
.160152	1a		inc a		                INC A
.160153	8f 93 00 16	sta $160093	                STA SCORE+2
.160157					        NG_CONTINUE
.160157	20 bd 01	jsr $1601bd	                JSR LOOK_FOR_LINES
.16015a	a9 06		lda #$06	                LDA #6
.16015c	8f 89 00 16	sta $160089	                STA PIECE_X
.160160	a9 00		lda #$00	                LDA #0
.160162	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.160166	8f 8e 00 16	sta $16008e	                STA PIECE_FIT
.16016a	8f 8d 00 16	sta $16008d	                STA PIECE_ROT
.16016e	20 9a 01	jsr $16019a	                JSR PICK_NEXT_PIECE
.160171	af 90 00 16	lda $160090	                LDA PIECE_CNTR
.160175	1a		inc a		                INC A
.160176	8f 90 00 16	sta $160090	                STA PIECE_CNTR
.16017a	c9 0a		cmp #$0a	                CMP #10
.16017c	d0 0f		bne $16018d	                BNE LOGIC_DONE
.16017e	a9 00		lda #$00	                LDA #0
.160180	8f 90 00 16	sta $160090	                STA PIECE_CNTR
.160184	af 95 00 16	lda $160095	                LDA LEVEL
.160188	1a		inc a		                INC A
.160189	8f 95 00 16	sta $160095	                STA LEVEL
.16018d					    LOGIC_DONE
.16018d	20 44 04	jsr $160444	                JSR DRAW_BOARD
.160190	20 e5 03	jsr $1603e5	                JSR DRAW_PIECE
.160193	20 8d 04	jsr $16048d	                JSR DRAW_SCORE
.160196	20 b6 04	jsr $1604b6	                JSR DRAW_LEVEL
.160199	60		rts		                RTS
.16019a					PICK_NEXT_PIECE
.16019a	af 84 e8 af	lda $afe884	                LDA GABE_RNG_DAT_LO
.16019e	29 07		and #$07	                AND #7
.1601a0	8f 88 00 16	sta $160088	                STA CURRENT_PIECE
.1601a4	c9 07		cmp #$07	                CMP #7
.1601a6	f0 f2		beq $16019a	                BEQ PICK_NEXT_PIECE
.1601a8	60		rts		                RTS
.1601a9					DISPLAY_SYMBOL
.1601a9	87 17		sta [$17]	                STA [CURSORPOS]
.1601ab	c2 20		rep #$20	                REP #$20        ; set A long
.1601ad	a5 17		lda $17		                LDA CURSORPOS
.1601af	18		clc		                CLC
.1601b0	69 00 20	adc #$2000	                ADC #$2000
.1601b3	85 1f		sta $1f		                STA COLORPOS
.1601b5	e2 20		sep #$20	                SEP #$20        ; set A short
.1601b7	a5 1e		lda $1e		                LDA CURCOLOR
.1601b9	87 1f		sta [$1f]	                STA [COLORPOS]
.1601bb	60		rts		                RTS
.1601bc					INVALID_KEY
.1601bc	60		rts		                RTS
.1601bd					LOOK_FOR_LINES
.1601bd	64 63		stz $63		                STZ ROT_VAL2 ; line count max 4
.1601bf					    INIT_LINE_CHECK
.1601bf	a0 00 00	ldy #$0000	                LDY #0
.1601c2	64 62		stz $62		                STZ ROT_VAL  ; column count max 10
.1601c4	c2 20		rep #$20	                REP #$20        ; set A long
.1601c6	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.1601ca	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.1601cd	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.1601d0	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.1601d3	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.1601d6	aa		tax		                TAX
.1601d7	e2 20		sep #$20	                SEP #$20        ; set A short
.1601d9					    CHK_NEXT_COL
.1601d9	bf 96 05 16	lda $160596,x	                LDA BOARD,X
.1601dd	f0 0f		beq $1601ee	                BEQ CHK_NEXT_LINE
.1601df	e6 62		inc $62		                INC ROT_VAL
.1601e1	e8		inx		                INX
.1601e2	c8		iny		                INY
.1601e3	c0 0e 00	cpy #$000e	                CPY #BOARD_WIDTH
.1601e6	d0 f1		bne $1601d9	                BNE CHK_NEXT_COL
.1601e8	a5 62		lda $62		                LDA ROT_VAL
.1601ea	c9 0e		cmp #$0e	                CMP #BOARD_WIDTH
.1601ec	f0 16		beq $160204	                BEQ LINE_FOUND
.1601ee					    CHK_NEXT_LINE
.1601ee	e6 63		inc $63		                INC ROT_VAL2
.1601f0	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.1601f4	1a		inc a		                INC A
.1601f5	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.1601f9	c9 14		cmp #$14	                CMP #BOARD_HEIGHT-1
.1601fb	f0 06		beq $160203	                BEQ LOOK_LINE_DONE
.1601fd	a5 63		lda $63		                LDA ROT_VAL2
.1601ff	c9 04		cmp #$04	                CMP #4
.160201	d0 bc		bne $1601bf	                BNE INIT_LINE_CHECK
.160203					    LOOK_LINE_DONE
.160203	60		rts		                RTS
.160204					    LINE_FOUND
.160204	c2 20		rep #$20	                REP #$20        ; set A long
.160206	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.16020a	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.16020d	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.160210	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.160213	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.160216	aa		tax		                TAX
.160217	e2 20		sep #$20	                SEP #$20        ; set A short
.160219	e8		inx		                INX
.16021a	e8		inx		                INX ; skip the first two columns
.16021b	a0 00 00	ldy #$0000	                LDY #0
.16021e	a9 3d		lda #$3d	                LDA #'='
.160220					        LINE_CHAR
.160220	9f 96 05 16	sta $160596,x	                STA BOARD,X
.160224	e8		inx		                INX
.160225	c8		iny		                INY
.160226	c0 0a 00	cpy #$000a	                CPY #BOARD_WIDTH-4
.160229	d0 f5		bne $160220	                BNE LINE_CHAR
.16022b	80 c1		bra $1601ee	                BRA CHK_NEXT_LINE
.16022d					GET_PIECE_VALUE
.16022d	a9 00		lda #$00	                LDA #0
.16022f	eb		xba		                XBA
.160230	af 8d 00 16	lda $16008d	                LDA PIECE_ROT
.160234	d0 05		bne $16023b	                BNE ROT_NEXT
.160236	bf bc 06 16	lda $1606bc,x	                LDA PIECE0,X  ; ROTATION 0
.16023a	60		rts		                RTS
.16023b					    ROT_NEXT
.16023b	c9 01		cmp #$01	                CMP #1
.16023d	d0 2b		bne $16026a	                BNE ROT_2
.16023f	da		phx		                PHX
.160240	8a		txa		                TXA
.160241	29 f0		and #$f0	                AND #$F0
.160243	85 63		sta $63		                STA ROT_VAL2
.160245	8a		txa		                TXA
.160246	29 03		and #$03	                AND #3
.160248	aa		tax		                TAX
.160249	38		sec		                SEC
.16024a	a9 0c		lda #$0c	                LDA #12       ; ROTATION 1
.16024c					        CMP_R1
.16024c	e0 00 00	cpx #$0000	                CPX #0
.16024f	f0 05		beq $160256	                BEQ R1_DONE
.160251	e9 04		sbc #$04	                SBC #4
.160253	ca		dex		                DEX
.160254	80 f6		bra $16024c	                BRA CMP_R1
.160256					        R1_DONE
.160256	85 62		sta $62		                STA ROT_VAL
.160258	a3 01		lda $01,s	                LDA 1,S
.16025a	4a		lsr a		                LSR A
.16025b	4a		lsr a		                LSR A
.16025c	29 03		and #$03	                AND #3
.16025e	18		clc		                CLC
.16025f	65 62		adc $62		                ADC ROT_VAL
.160261	65 63		adc $63		                ADC ROT_VAL2
.160263	aa		tax		                TAX
.160264	bf bc 06 16	lda $1606bc,x	                LDA PIECE0,X  ; ROTATION 1
.160268	fa		plx		                PLX
.160269	60		rts		                RTS
.16026a					    ROT_2
.16026a	c9 02		cmp #$02	                CMP #2
.16026c	d0 1a		bne $160288	                BNE ROT_3
.16026e	da		phx		                PHX
.16026f	8a		txa		                TXA
.160270	29 f0		and #$f0	                AND #$F0
.160272	85 63		sta $63		                STA ROT_VAL2
.160274	8a		txa		                TXA
.160275	29 0f		and #$0f	                AND #$F
.160277	85 62		sta $62		                STA ROT_VAL
.160279	38		sec		                SEC
.16027a	a9 0f		lda #$0f	                LDA #$F
.16027c	e5 62		sbc $62		                SBC ROT_VAL
.16027e	18		clc		                CLC
.16027f	65 63		adc $63		                ADC ROT_VAL2
.160281	aa		tax		                TAX
.160282	bf bc 06 16	lda $1606bc,x	                LDA PIECE0,X  ; ROTATION 2
.160286	fa		plx		                PLX
.160287	60		rts		                RTS
.160288					    ROT_3
.160288	da		phx		                PHX
.160289	8a		txa		                TXA
.16028a	29 f0		and #$f0	                AND #$F0
.16028c	85 63		sta $63		                STA ROT_VAL2
.16028e	8a		txa		                TXA
.16028f	29 0c		and #$0c	                AND #$C
.160291	4a		lsr a		                LSR A
.160292	4a		lsr a		                LSR A
.160293	85 62		sta $62		                STA ROT_VAL
.160295	a3 01		lda $01,s	                LDA 1,S
.160297	29 03		and #$03	                AND #3
.160299	aa		tax		                TAX
.16029a	a9 03		lda #$03	                LDA #3       ; ROTATION 3
.16029c					        CMP_R3
.16029c	e0 00 00	cpx #$0000	                CPX #0
.16029f	f0 06		beq $1602a7	                BEQ R3_DONE
.1602a1	18		clc		                CLC
.1602a2	69 04		adc #$04	                ADC #4
.1602a4	ca		dex		                DEX
.1602a5	80 f5		bra $16029c	                BRA CMP_R3
.1602a7					        R3_DONE
.1602a7	38		sec		                SEC
.1602a8	e5 62		sbc $62		                SBC ROT_VAL
.1602aa	18		clc		                CLC
.1602ab	65 63		adc $63		                ADC ROT_VAL2
.1602ad	aa		tax		                TAX
.1602ae	bf bc 06 16	lda $1606bc,x	                LDA PIECE0,X  ; ROTATION 3
.1602b2	fa		plx		                PLX
.1602b3	60		rts		                RTS
.1602b4					MOVE_PIECE_LEFT
.1602b4	af 94 00 16	lda $160094	                LDA GAME_STATE
.1602b8	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.1602ba	f0 21		beq $1602dd	                BEQ MOVE_LEFT_DONE
.1602bc	af 89 00 16	lda $160089	                LDA PIECE_X
.1602c0	3a		dec a		                DEC A
.1602c1	8f 89 00 16	sta $160089	                STA PIECE_X
.1602c5	20 8b 03	jsr $16038b	                JSR DOES_PIECE_FIT
.1602c8	af 8e 00 16	lda $16008e	                LDA PIECE_FIT
.1602cc	f0 0f		beq $1602dd	                BEQ MOVE_LEFT_DONE
.1602ce	af 89 00 16	lda $160089	                LDA PIECE_X
.1602d2	1a		inc a		                INC A
.1602d3	8f 89 00 16	sta $160089	                STA PIECE_X
.1602d7	a9 00		lda #$00	                LDA #0
.1602d9	8f 8e 00 16	sta $16008e	                STA PIECE_FIT
.1602dd					    MOVE_LEFT_DONE
.1602dd	60		rts		                RTS
.1602de					MOVE_PIECE_RIGHT
.1602de	af 94 00 16	lda $160094	                LDA GAME_STATE
.1602e2	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.1602e4	f0 21		beq $160307	                BEQ MOVE_RIGHT_DONE
.1602e6	af 89 00 16	lda $160089	                LDA PIECE_X
.1602ea	1a		inc a		                INC A
.1602eb	8f 89 00 16	sta $160089	                STA PIECE_X
.1602ef	20 8b 03	jsr $16038b	                JSR DOES_PIECE_FIT
.1602f2	af 8e 00 16	lda $16008e	                LDA PIECE_FIT
.1602f6	f0 0f		beq $160307	                BEQ MOVE_RIGHT_DONE
.1602f8	af 89 00 16	lda $160089	                LDA PIECE_X
.1602fc	3a		dec a		                DEC A
.1602fd	8f 89 00 16	sta $160089	                STA PIECE_X
.160301	a9 00		lda #$00	                LDA #0
.160303	8f 8e 00 16	sta $16008e	                STA PIECE_FIT
.160307					    MOVE_RIGHT_DONE
.160307	60		rts		                RTS
.160308					MOVE_PIECE_DOWN
.160308	af 94 00 16	lda $160094	                LDA GAME_STATE
.16030c	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.16030e	f0 09		beq $160319	                BEQ DOWN_DONE
.160310	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.160314	1a		inc a		                INC A
.160315	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.160319					    DOWN_DONE
.160319	60		rts		                RTS
.16031a					ROTATE_PIECE
.16031a	af 94 00 16	lda $160094	                LDA GAME_STATE
.16031e	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.160320	d0 07		bne $160329	                BNE ROT_START
.160322	a9 02		lda #$02	                LDA #2
.160324	8f 94 00 16	sta $160094	                STA GAME_STATE
.160328	60		rts		                RTS
.160329					    ROT_START
.160329	af 8d 00 16	lda $16008d	                LDA PIECE_ROT
.16032d	1a		inc a		                INC A
.16032e	c9 04		cmp #$04	                CMP #4
.160330	d0 02		bne $160334	                BNE ROTATE_DONE
.160332	a9 00		lda #$00	                LDA #0
.160334					    ROTATE_DONE
.160334	8f 8d 00 16	sta $16008d	                STA PIECE_ROT
.160338	60		rts		                RTS
.160339					COPY_PIECE
.160339	af 88 00 16	lda $160088	                LDA CURRENT_PIECE
.16033d	0a		asl a		                ASL A
.16033e	0a		asl a		                ASL A
.16033f	0a		asl a		                ASL A
.160340	0a		asl a		                ASL A
.160341	aa		tax		                TAX
.160342	c2 20		rep #$20	                REP #$20        ; set A long
.160344	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.160348	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.16034b	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.16034e	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.160351	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.160354	18		clc		                CLC
.160355	6f 89 00 16	adc $160089	                ADC PIECE_X
.160359	a8		tay		                TAY
.16035a	a9 00 00	lda #$0000	                LDA #0
.16035d	e2 20		sep #$20	                SEP #$20        ; set A short
.16035f					    NEXT_COPY
.16035f	20 2d 02	jsr $16022d	                JSR GET_PIECE_VALUE
.160362	c9 00		cmp #$00	                CMP #0
.160364	f0 0e		beq $160374	                BEQ SKIP_COPY
.160366	da		phx		                PHX
.160367	bb		tyx		                TYX
.160368	18		clc		                CLC
.160369	af 88 00 16	lda $160088	                LDA CURRENT_PIECE
.16036d	69 41		adc #$41	                ADC #65
.16036f	9f 96 05 16	sta $160596,x	                STA BOARD,X
.160373	fa		plx		                PLX
.160374					        SKIP_COPY
.160374	e8		inx		                INX
.160375	c8		iny		                INY
.160376	8a		txa		                TXA
.160377	29 03		and #$03	                AND #3
.160379	d0 e4		bne $16035f	                BNE NEXT_COPY
.16037b	c2 20		rep #$20	                REP #$20        ; set A long
.16037d	98		tya		                TYA
.16037e	18		clc		                CLC
.16037f	69 0a 00	adc #$000a	                ADC #BOARD_WIDTH-4
.160382	a8		tay		                TAY
.160383	e2 20		sep #$20	                SEP #$20        ; set A short
.160385	8a		txa		                TXA
.160386	29 0f		and #$0f	                AND #$F
.160388	d0 d5		bne $16035f	                BNE NEXT_COPY
.16038a	60		rts		                RTS
.16038b					DOES_PIECE_FIT
.16038b	a9 00		lda #$00	                LDA #0
.16038d	eb		xba		                XBA
.16038e	af 88 00 16	lda $160088	                LDA CURRENT_PIECE
.160392	0a		asl a		                ASL A
.160393	0a		asl a		                ASL A
.160394	0a		asl a		                ASL A
.160395	0a		asl a		                ASL A
.160396	aa		tax		                TAX
.160397	c2 20		rep #$20	                REP #$20        ; set A long
.160399	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.16039d	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.1603a0	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.1603a3	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.1603a6	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.1603a9	18		clc		                CLC
.1603aa	6f 89 00 16	adc $160089	                ADC PIECE_X
.1603ae	a8		tay		                TAY
.1603af	a9 00 00	lda #$0000	                LDA #0
.1603b2	e2 20		sep #$20	                SEP #$20        ; set A short
.1603b4					    NEXT_COLLISION
.1603b4	20 2d 02	jsr $16022d	                JSR GET_PIECE_VALUE
.1603b7	c9 00		cmp #$00	                CMP #0
.1603b9	f0 0b		beq $1603c6	                BEQ SKIP_BYTE
.1603bb	da		phx		                PHX
.1603bc	bb		tyx		                TYX
.1603bd	bf 96 05 16	lda $160596,x	                LDA BOARD,X
.1603c1	fa		plx		                PLX
.1603c2	c9 00		cmp #$00	                CMP #0
.1603c4	d0 18		bne $1603de	                BNE OCCUPIED
.1603c6					    SKIP_BYTE
.1603c6	e8		inx		                INX
.1603c7	c8		iny		                INY
.1603c8	8a		txa		                TXA
.1603c9	29 03		and #$03	                AND #3
.1603cb	d0 e7		bne $1603b4	                BNE NEXT_COLLISION
.1603cd	c2 20		rep #$20	                REP #$20        ; set A long
.1603cf	98		tya		                TYA
.1603d0	18		clc		                CLC
.1603d1	69 0a 00	adc #$000a	                ADC #BOARD_WIDTH-4
.1603d4	a8		tay		                TAY
.1603d5	e2 20		sep #$20	                SEP #$20        ; set A short
.1603d7	8a		txa		                TXA
.1603d8	29 0f		and #$0f	                AND #$F
.1603da	d0 d8		bne $1603b4	                BNE NEXT_COLLISION
.1603dc	80 06		bra $1603e4	                BRA PF_DONE
.1603de					    OCCUPIED
.1603de	a9 01		lda #$01	                LDA #1
.1603e0	8f 8e 00 16	sta $16008e	                STA PIECE_FIT
.1603e4					    PF_DONE
.1603e4	60		rts		                RTS
.1603e5					DRAW_PIECE
.1603e5	a9 63		lda #$63	                LDA #$63
.1603e7	85 1e		sta $1e		                STA CURCOLOR
.1603e9	c2 20		rep #$20	                REP #$20        ; set A long
.1603eb	a9 1d a9	lda #$a91d	                LDA #START_BOARD
.1603ee	18		clc		                CLC
.1603ef	6f 89 00 16	adc $160089	                ADC PIECE_X
.1603f3	85 17		sta $17		                STA CURSORPOS
.1603f5	a9 80 00	lda #$0080	                LDA #128
.1603f8	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.1603fb	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.1603ff	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.160402	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.160405	18		clc		                CLC
.160406	65 17		adc $17		                ADC CURSORPOS
.160408	85 17		sta $17		                STA CURSORPOS
.16040a	e2 20		sep #$20	                SEP #$20        ; set A short
.16040c	a9 00		lda #$00	                LDA #0
.16040e	eb		xba		                XBA
.16040f	af 88 00 16	lda $160088	                LDA CURRENT_PIECE
.160413	0a		asl a		                ASL A
.160414	0a		asl a		                ASL A
.160415	0a		asl a		                ASL A
.160416	0a		asl a		                ASL A
.160417	aa		tax		                TAX
.160418					        NEXT_PIECE_SYMBOL
.160418	20 2d 02	jsr $16022d	                JSR GET_PIECE_VALUE
.16041b	c9 00		cmp #$00	                CMP #0
.16041d	f0 0a		beq $160429	                BEQ SKIP_DRAW
.16041f	af 88 00 16	lda $160088	                LDA CURRENT_PIECE
.160423	18		clc		                CLC
.160424	69 41		adc #$41	                ADC #65
.160426	20 a9 01	jsr $1601a9	                JSR DISPLAY_SYMBOL
.160429					        SKIP_DRAW
.160429	e8		inx		                INX
.16042a	e6 17		inc $17		                INC CURSORPOS
.16042c	8a		txa		                TXA
.16042d	29 03		and #$03	                AND #3
.16042f	d0 e7		bne $160418	                BNE NEXT_PIECE_SYMBOL
.160431	c2 20		rep #$20	                REP #$20        ; set A long
.160433	a5 17		lda $17		                LDA CURSORPOS
.160435	18		clc		                CLC
.160436	69 7c 00	adc #$007c	                ADC #124
.160439	85 17		sta $17		                STA CURSORPOS
.16043b	8a		txa		                TXA
.16043c	29 0f 00	and #$000f	                AND #$F
.16043f	e2 20		sep #$20	                SEP #$20        ; set A short
.160441	d0 d5		bne $160418	                BNE NEXT_PIECE_SYMBOL
.160443	60		rts		                RTS
.160444					DRAW_BOARD
.160444	a9 40		lda #$40	                LDA #$40
.160446	85 1e		sta $1e		                STA CURCOLOR
.160448	a2 1d a9	ldx #$a91d	                LDX #START_BOARD
.16044b	86 17		stx $17		                STX CURSORPOS
.16044d	a2 00 00	ldx #$0000	                LDX #0
.160450	a9 00		lda #$00	                LDA #0
.160452	8f 87 00 16	sta $160087	                STA BOARDY
.160456					    NEXT_ROW
.160456	a9 00		lda #$00	                LDA #0
.160458	8f 86 00 16	sta $160086	                STA BOARDX
.16045c					        NEXT_SYMBOL
.16045c	bf 96 05 16	lda $160596,x	                LDA BOARD,X
.160460	20 a9 01	jsr $1601a9	                JSR DISPLAY_SYMBOL
.160463	e8		inx		                INX
.160464	e6 17		inc $17		                INC CURSORPOS
.160466	af 86 00 16	lda $160086	                LDA BOARDX
.16046a	1a		inc a		                INC A
.16046b	8f 86 00 16	sta $160086	                STA BOARDX
.16046f	c9 0e		cmp #$0e	                CMP #BOARD_WIDTH
.160471	d0 e9		bne $16045c	                BNE NEXT_SYMBOL
.160473	c2 20		rep #$20	                REP #$20        ; set A long
.160475	a5 17		lda $17		                LDA CURSORPOS
.160477	18		clc		                CLC
.160478	69 72 00	adc #$0072	                ADC #128-BOARD_WIDTH
.16047b	85 17		sta $17		                STA CURSORPOS
.16047d	e2 20		sep #$20	                SEP #$20        ; set A short
.16047f	af 87 00 16	lda $160087	                LDA BOARDY
.160483	1a		inc a		                INC A
.160484	8f 87 00 16	sta $160087	                STA BOARDY
.160488	c9 15		cmp #$15	                CMP #BOARD_HEIGHT
.16048a	d0 ca		bne $160456	                BNE NEXT_ROW
.16048c	60		rts		                RTS
.16048d					DRAW_SCORE
.16048d	a0 b8 a2	ldy #$a2b8	                LDY #$A000 + 128*5 + 56
.160490	84 17		sty $17		                STY CURSORPOS
.160492	a9 20		lda #$20	                LDA #$20
.160494	85 1e		sta $1e		                STA CURCOLOR
.160496	a0 b0 00	ldy #$00b0	                LDY #<>SCORE_MSG
.160499	84 60		sty $60		                STY MSG_ADDR
.16049b	20 b7 04	jsr $1604b7	                JSR DISPLAY_MSG
.16049e	e6 17		inc $17		                INC CURSORPOS
.1604a0	af 93 00 16	lda $160093	                LDA SCORE + 2
.1604a4	20 1d 05	jsr $16051d	                JSR DISPLAY_HEX
.1604a7	af 92 00 16	lda $160092	                LDA SCORE + 1
.1604ab	20 1d 05	jsr $16051d	                JSR DISPLAY_HEX
.1604ae	af 91 00 16	lda $160091	                LDA SCORE
.1604b2	20 1d 05	jsr $16051d	                JSR DISPLAY_HEX
.1604b5	60		rts		                RTS
.1604b6					DRAW_LEVEL
.1604b6	60		rts		                RTS
.1604b7					DISPLAY_MSG
.1604b7	8b		phb		                PHB
.1604b8	a9 16		lda #$16	                LDA #`SCORE_MSG
.1604ba	48		pha		                PHA
.1604bb	ab		plb		                PLB
.1604bc					    MSG_LOOP
.1604bc	b2 60		lda ($60)	                LDA (MSG_ADDR)
.1604be	f0 09		beq $1604c9	                BEQ MSG_DONE
.1604c0	20 a9 01	jsr $1601a9	                JSR DISPLAY_SYMBOL
.1604c3	e6 17		inc $17		                INC CURSORPOS
.1604c5	e6 60		inc $60		                INC MSG_ADDR
.1604c7	80 f3		bra $1604bc	                BRA MSG_LOOP
.1604c9	ab		plb		    MSG_DONE    PLB
.1604ca	60		rts		                RTS
.1604cb					GAME_OVER
.1604cb	a9 ff		lda #$ff	                LDA #$FF
.1604cd	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1604d1	a9 01		lda #$01	                LDA #1
.1604d3	8f 94 00 16	sta $160094	                STA GAME_STATE
.1604d7	22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1604db	a0 1f ad	ldy #$ad1f	                LDY #$A000 + 128*26 + 31
.1604de	84 17		sty $17		                STY CURSORPOS
.1604e0	a9 20		lda #$20	                LDA #$20
.1604e2	85 1e		sta $1e		                STA CURCOLOR
.1604e4	a0 a6 00	ldy #$00a6	                LDY #<>GAME_OVER_MSG
.1604e7	84 60		sty $60		                STY MSG_ADDR
.1604e9	20 b7 04	jsr $1604b7	                JSR DISPLAY_MSG
.1604ec	a9 00		lda #$00	                LDA #0
.1604ee	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.1604f2	a2 02 00	ldx #$0002	                LDX #2
.1604f5					        CLEAR_BOARD_ROW
.1604f5	a0 00 00	ldy #$0000	                LDY #0
.1604f8	a9 00		lda #$00	                LDA #0
.1604fa					        CLEAR_BOARD_COL
.1604fa	9f 96 05 16	sta $160596,x	                STA BOARD,X
.1604fe	e8		inx		                INX
.1604ff	c8		iny		                INY
.160500	c0 0a 00	cpy #$000a	                CPY #10
.160503	d0 f5		bne $1604fa	                BNE CLEAR_BOARD_COL
.160505	e8		inx		                INX
.160506	e8		inx		                INX
.160507	e8		inx		                INX
.160508	e8		inx		                INX
.160509	af 8b 00 16	lda $16008b	                LDA PIECE_Y
.16050d	1a		inc a		                INC A
.16050e	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.160512	c9 14		cmp #$14	                CMP #BOARD_HEIGHT-1
.160514	d0 df		bne $1604f5	                BNE CLEAR_BOARD_ROW
.160516	a9 00		lda #$00	                LDA #0
.160518	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.16051c	60		rts		                RTS
.16051d					DISPLAY_HEX
.16051d	48		pha		                PHA
.16051e	eb		xba		                XBA
.16051f	a9 00		lda #$00	                LDA #0
.160521	eb		xba		                XBA
.160522	29 f0		and #$f0	                AND #$F0
.160524	4a		lsr a		                LSR A
.160525	4a		lsr a		                LSR A
.160526	4a		lsr a		                LSR A
.160527	4a		lsr a		                LSR A
.160528	aa		tax		                TAX
.160529	bf 96 00 16	lda $160096,x	                LDA HEX_VALUES,X
.16052d	20 a9 01	jsr $1601a9	                JSR DISPLAY_SYMBOL
.160530	e6 17		inc $17		                INC CURSORPOS
.160532	a9 00		lda #$00	                LDA #0  ; clear B
.160534	eb		xba		                XBA
.160535	68		pla		                PLA
.160536	29 0f		and #$0f	                AND #$F
.160538	aa		tax		                TAX
.160539	bf 96 00 16	lda $160096,x	                LDA HEX_VALUES,X
.16053d	20 a9 01	jsr $1601a9	                JSR DISPLAY_SYMBOL
.160540	e6 17		inc $17		                INC CURSORPOS
.160542	60		rts		                RTS
.160543					INIT_GAME
.160543	a9 32		lda #$32	                LDA #50
.160545	8f 8f 00 16	sta $16008f	                STA GAME_SPEED
.160549	a9 00		lda #$00	                LDA #0       ;Set Cursor Disabled
.16054b	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG
.16054f	8f 8b 00 16	sta $16008b	                STA PIECE_Y
.160553	8f 8e 00 16	sta $16008e	                STA PIECE_FIT
.160557	8f 83 00 16	sta $160083	                STA TICK_COUNT
.16055b	8f 94 00 16	sta $160094	                STA GAME_STATE
.16055f	8f 91 00 16	sta $160091	                STA SCORE
.160563	8f 92 00 16	sta $160092	                STA SCORE + 1
.160567	8f 93 00 16	sta $160093	                STA SCORE + 2
.16056b	a9 01		lda #$01	                LDA #1
.16056d	8f 95 00 16	sta $160095	                STA LEVEL
.160571	a9 ff		lda #$ff	                LDA #$FF
.160573	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.160577	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.16057b	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.16057f	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.160583	a9 ff		lda #$ff	                LDA #$FF
.160585	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.160589	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.16058d	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.160591	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.160595	60		rts		                RTS
.160596					BOARD
>160596	23				    .byte '#'
>160597	23				    .byte '#'
>160598	00				        .byte 0
>160599	00				        .byte 0
>16059a	00				        .byte 0
>16059b	00				        .byte 0
>16059c	00				        .byte 0
>16059d	00				        .byte 0
>16059e	00				        .byte 0
>16059f	00				        .byte 0
>1605a0	00				        .byte 0
>1605a1	00				        .byte 0
>1605a2	23				    .byte '#'
>1605a3	23				    .byte '#'
>1605a4	23				    .byte '#'
>1605a5	23				    .byte '#'
>1605a6	00				        .byte 0
>1605a7	00				        .byte 0
>1605a8	00				        .byte 0
>1605a9	00				        .byte 0
>1605aa	00				        .byte 0
>1605ab	00				        .byte 0
>1605ac	00				        .byte 0
>1605ad	00				        .byte 0
>1605ae	00				        .byte 0
>1605af	00				        .byte 0
>1605b0	23				    .byte '#'
>1605b1	23				    .byte '#'
>1605b2	23				    .byte '#'
>1605b3	23				    .byte '#'
>1605b4	00				        .byte 0
>1605b5	00				        .byte 0
>1605b6	00				        .byte 0
>1605b7	00				        .byte 0
>1605b8	00				        .byte 0
>1605b9	00				        .byte 0
>1605ba	00				        .byte 0
>1605bb	00				        .byte 0
>1605bc	00				        .byte 0
>1605bd	00				        .byte 0
>1605be	23				    .byte '#'
>1605bf	23				    .byte '#'
>1605c0	23				    .byte '#'
>1605c1	23				    .byte '#'
>1605c2	00				        .byte 0
>1605c3	00				        .byte 0
>1605c4	00				        .byte 0
>1605c5	00				        .byte 0
>1605c6	00				        .byte 0
>1605c7	00				        .byte 0
>1605c8	00				        .byte 0
>1605c9	00				        .byte 0
>1605ca	00				        .byte 0
>1605cb	00				        .byte 0
>1605cc	23				    .byte '#'
>1605cd	23				    .byte '#'
>1605ce	23				    .byte '#'
>1605cf	23				    .byte '#'
>1605d0	00				        .byte 0
>1605d1	00				        .byte 0
>1605d2	00				        .byte 0
>1605d3	00				        .byte 0
>1605d4	00				        .byte 0
>1605d5	00				        .byte 0
>1605d6	00				        .byte 0
>1605d7	00				        .byte 0
>1605d8	00				        .byte 0
>1605d9	00				        .byte 0
>1605da	23				    .byte '#'
>1605db	23				    .byte '#'
>1605dc	23				    .byte '#'
>1605dd	23				    .byte '#'
>1605de	00				        .byte 0
>1605df	00				        .byte 0
>1605e0	00				        .byte 0
>1605e1	00				        .byte 0
>1605e2	00				        .byte 0
>1605e3	00				        .byte 0
>1605e4	00				        .byte 0
>1605e5	00				        .byte 0
>1605e6	00				        .byte 0
>1605e7	00				        .byte 0
>1605e8	23				    .byte '#'
>1605e9	23				    .byte '#'
>1605ea	23				    .byte '#'
>1605eb	23				    .byte '#'
>1605ec	00				        .byte 0
>1605ed	00				        .byte 0
>1605ee	00				        .byte 0
>1605ef	00				        .byte 0
>1605f0	00				        .byte 0
>1605f1	00				        .byte 0
>1605f2	00				        .byte 0
>1605f3	00				        .byte 0
>1605f4	00				        .byte 0
>1605f5	00				        .byte 0
>1605f6	23				    .byte '#'
>1605f7	23				    .byte '#'
>1605f8	23				    .byte '#'
>1605f9	23				    .byte '#'
>1605fa	00				        .byte 0
>1605fb	00				        .byte 0
>1605fc	00				        .byte 0
>1605fd	00				        .byte 0
>1605fe	00				        .byte 0
>1605ff	00				        .byte 0
>160600	00				        .byte 0
>160601	00				        .byte 0
>160602	00				        .byte 0
>160603	00				        .byte 0
>160604	23				    .byte '#'
>160605	23				    .byte '#'
>160606	23				    .byte '#'
>160607	23				    .byte '#'
>160608	00				        .byte 0
>160609	00				        .byte 0
>16060a	00				        .byte 0
>16060b	00				        .byte 0
>16060c	00				        .byte 0
>16060d	00				        .byte 0
>16060e	00				        .byte 0
>16060f	00				        .byte 0
>160610	00				        .byte 0
>160611	00				        .byte 0
>160612	23				    .byte '#'
>160613	23				    .byte '#'
>160614	23				    .byte '#'
>160615	23				    .byte '#'
>160616	00				        .byte 0
>160617	00				        .byte 0
>160618	00				        .byte 0
>160619	00				        .byte 0
>16061a	00				        .byte 0
>16061b	00				        .byte 0
>16061c	00				        .byte 0
>16061d	00				        .byte 0
>16061e	00				        .byte 0
>16061f	00				        .byte 0
>160620	23				    .byte '#'
>160621	23				    .byte '#'
>160622	23				    .byte '#'
>160623	23				    .byte '#'
>160624	00				        .byte 0
>160625	00				        .byte 0
>160626	00				        .byte 0
>160627	00				        .byte 0
>160628	00				        .byte 0
>160629	00				        .byte 0
>16062a	00				        .byte 0
>16062b	00				        .byte 0
>16062c	00				        .byte 0
>16062d	00				        .byte 0
>16062e	23				    .byte '#'
>16062f	23				    .byte '#'
>160630	23				    .byte '#'
>160631	23				    .byte '#'
>160632	00				        .byte 0
>160633	00				        .byte 0
>160634	00				        .byte 0
>160635	00				        .byte 0
>160636	00				        .byte 0
>160637	00				        .byte 0
>160638	00				        .byte 0
>160639	00				        .byte 0
>16063a	00				        .byte 0
>16063b	00				        .byte 0
>16063c	23				    .byte '#'
>16063d	23				    .byte '#'
>16063e	23				    .byte '#'
>16063f	23				    .byte '#'
>160640	00				        .byte 0
>160641	00				        .byte 0
>160642	00				        .byte 0
>160643	00				        .byte 0
>160644	00				        .byte 0
>160645	00				        .byte 0
>160646	00				        .byte 0
>160647	00				        .byte 0
>160648	00				        .byte 0
>160649	00				        .byte 0
>16064a	23				    .byte '#'
>16064b	23				    .byte '#'
>16064c	23				    .byte '#'
>16064d	23				    .byte '#'
>16064e	00				        .byte 0
>16064f	00				        .byte 0
>160650	00				        .byte 0
>160651	00				        .byte 0
>160652	00				        .byte 0
>160653	00				        .byte 0
>160654	00				        .byte 0
>160655	00				        .byte 0
>160656	00				        .byte 0
>160657	00				        .byte 0
>160658	23				    .byte '#'
>160659	23				    .byte '#'
>16065a	23				    .byte '#'
>16065b	23				    .byte '#'
>16065c	00				        .byte 0
>16065d	00				        .byte 0
>16065e	00				        .byte 0
>16065f	00				        .byte 0
>160660	00				        .byte 0
>160661	00				        .byte 0
>160662	00				        .byte 0
>160663	00				        .byte 0
>160664	00				        .byte 0
>160665	00				        .byte 0
>160666	23				    .byte '#'
>160667	23				    .byte '#'
>160668	23				    .byte '#'
>160669	23				    .byte '#'
>16066a	00				        .byte 0
>16066b	00				        .byte 0
>16066c	00				        .byte 0
>16066d	00				        .byte 0
>16066e	00				        .byte 0
>16066f	00				        .byte 0
>160670	00				        .byte 0
>160671	00				        .byte 0
>160672	00				        .byte 0
>160673	00				        .byte 0
>160674	23				    .byte '#'
>160675	23				    .byte '#'
>160676	23				    .byte '#'
>160677	23				    .byte '#'
>160678	00				        .byte 0
>160679	00				        .byte 0
>16067a	00				        .byte 0
>16067b	00				        .byte 0
>16067c	00				        .byte 0
>16067d	00				        .byte 0
>16067e	00				        .byte 0
>16067f	00				        .byte 0
>160680	00				        .byte 0
>160681	00				        .byte 0
>160682	23				    .byte '#'
>160683	23				    .byte '#'
>160684	23				    .byte '#'
>160685	23				    .byte '#'
>160686	00				        .byte 0
>160687	00				        .byte 0
>160688	00				        .byte 0
>160689	00				        .byte 0
>16068a	00				        .byte 0
>16068b	00				        .byte 0
>16068c	00				        .byte 0
>16068d	00				        .byte 0
>16068e	00				        .byte 0
>16068f	00				        .byte 0
>160690	23				    .byte '#'
>160691	23				    .byte '#'
>160692	23				    .byte '#'
>160693	23				    .byte '#'
>160694	00				        .byte 0
>160695	00				        .byte 0
>160696	00				        .byte 0
>160697	00				        .byte 0
>160698	00				        .byte 0
>160699	00				        .byte 0
>16069a	00				        .byte 0
>16069b	00				        .byte 0
>16069c	00				        .byte 0
>16069d	00				        .byte 0
>16069e	23				    .byte '#'
>16069f	23				    .byte '#'
>1606a0	23				    .byte '#'
>1606a1	23				    .byte '#'
>1606a2	00				        .byte 0
>1606a3	00				        .byte 0
>1606a4	00				        .byte 0
>1606a5	00				        .byte 0
>1606a6	00				        .byte 0
>1606a7	00				        .byte 0
>1606a8	00				        .byte 0
>1606a9	00				        .byte 0
>1606aa	00				        .byte 0
>1606ab	00				        .byte 0
>1606ac	23				    .byte '#'
>1606ad	23				    .byte '#'
>1606ae	23				    .byte '#'
>1606af	23				    .byte '#'
>1606b0	23				    .byte '#'
>1606b1	23				    .byte '#'
>1606b2	23				    .byte '#'
>1606b3	23				    .byte '#'
>1606b4	23				    .byte '#'
>1606b5	23				    .byte '#'
>1606b6	23				    .byte '#'
>1606b7	23				    .byte '#'
>1606b8	23				    .byte '#'
>1606b9	23				    .byte '#'
>1606ba	23				    .byte '#'
>1606bb	23				    .byte '#'
.1606bc					PIECE0
>1606bc	00 00 01 00			    .byte 0,0,1,0
>1606c0	00 00 01 00			    .byte 0,0,1,0
>1606c4	00 00 01 00			    .byte 0,0,1,0
>1606c8	00 00 01 00			    .byte 0,0,1,0
.1606cc					PIECE1
>1606cc	00 01 01 00			    .byte 0,1,1,0
>1606d0	00 01 01 00			    .byte 0,1,1,0
>1606d4	00 00 00 00			    .byte 0,0,0,0
>1606d8	00 00 00 00			    .byte 0,0,0,0
.1606dc					PIECE2
>1606dc	00 01 00 00			    .byte 0,1,0,0
>1606e0	00 01 00 00			    .byte 0,1,0,0
>1606e4	00 01 01 00			    .byte 0,1,1,0
>1606e8	00 00 00 00			    .byte 0,0,0,0
.1606ec					PIECE3
>1606ec	00 00 01 00			    .byte 0,0,1,0
>1606f0	00 00 01 00			    .byte 0,0,1,0
>1606f4	00 01 01 00			    .byte 0,1,1,0
>1606f8	00 00 00 00			    .byte 0,0,0,0
.1606fc					PIECE4
>1606fc	00 00 01 00			    .byte 0,0,1,0
>160700	00 01 01 00			    .byte 0,1,1,0
>160704	00 00 01 00			    .byte 0,0,1,0
>160708	00 00 00 00			    .byte 0,0,0,0
.16070c					PIECE5
>16070c	00 00 01 00			    .byte 0,0,1,0
>160710	00 01 01 00			    .byte 0,1,1,0
>160714	00 01 00 00			    .byte 0,1,0,0
>160718	00 00 00 00			    .byte 0,0,0,0
.16071c					PIECE6
>16071c	00 01 00 00			    .byte 0,1,0,0
>160720	00 01 01 00			    .byte 0,1,1,0
>160724	00 00 01 00			    .byte 0,0,1,0
>160728	00 00 00 00			    .byte 0,0,0,0

;******  End of listing
