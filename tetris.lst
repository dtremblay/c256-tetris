
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass.exe --long-address -x --intel-hex -o tetris.hex --list tetris.lst tetris.asm
; Tue Apr 28 00:42:57 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: tetris.asm


;******  Processing file: macros_inc.asm


;******  Return to file: tetris.asm


;******  Processing file: bank_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008 ; This Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f				COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036 ;
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2 Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_ORDER_NUM    = $000048 ; 2 Bytes
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004e				RAD_TEMP         = $00004E
=$000050				RAD_EFFECT       = $000050
=$000051				SDOS_FILE_REC_PTR= $000051 ; 3 byte pointer to a simple file struct
=$000054				SDOS_LOOP        = $000054 ; variable to count file length
=$000055				SDOS_FILE_SIZE   = $000055 ; 4 bytes for the file length
>0060	00				MIDI_COUNTER    .byte 0
>0061	00				MIDI_REG        .byte 0
>0062	00				MIDI_CTRL       .byte 0
>0063	00				MIDI_CHANNEL    .byte 0
>0064	00				MIDI_DATA1      .byte 0
>0065	00				MIDI_DATA2      .byte 0
>0066	00				TIMING_CNTR     .byte 0
>0067	00 00 00			INSTR_ADDR      .fill 3,0
>006a	17 00				INSTR_NUMBER    .byte $17, 0
>006c	01				LINE_NUM_HEX    .byte 1
>006d	01				TAB_COUNTER     .byte 1
>006e	01				REM_LINES       .byte 1
>006f	01				DEC_MEM         .byte 1
>0070	00 00 00			PTRN_ADDR       .long 0
>0073	00 00 00			LINE_ADDR       .long 0
>0076	00				CONV_VAL        .byte 0
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				RAD_ADDR         = $0000F0 ; 3 bytes to avoid OPL2 errors.
=$0000f3				RAD_PATTRN       = $0000F3 ; 1 bytes - offset to patter
=$0000f4				RAD_PTN_DEST     = $0000F4 ; 3 bytes - where to write the pattern data
=$0000f7				RAD_CHANNEL      = $0000F7 ; 2 bytes - 0 to 8
=$0000f9				RAD_LAST_NOTE    = $0000F9 ; 1 if this is the last note
=$0000fa				RAD_LINE_PTR     = $0000FA ; 2 bytes - offset to memory location
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$00031f				SDOS_LINE_SELECT = $00031F ; used by the file menu to track which item is selected (0-37)
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars for the file path
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00				ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00				HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10				HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20				HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30				HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40				HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60				HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80				Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0				VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000				VECTORS_END      = $200000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: tetris.asm


;******  Processing file: vicky_def.asm

=$af0000				MASTER_CTRL_REG_L       = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H       = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$af0004				BORDER_CTRL_REG         = $AF0004   ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$01					Border_Ctrl_Enable      = $01
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008   ; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009   ; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af0018				TXT_CLR_START_DISPLAY_PTR = $AF0018  ; (0 to 255) (this Add a X Offset to the Display Start Address)
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$01					VDMA_CTRL_Enable        = $01
=$02					VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04					VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08					VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$80					VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401				VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401				VDMA_STATUS_REG         = $AF0401 ; Read only
=$01					VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02					VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04					VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80					VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402				VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403				VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404				VDMA_SRC_ADDY_H         = $AF0404
=$af0405				VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406				VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407				VDMA_DST_ADDY_H         = $AF0407
=$af0408				VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409				VDMA_SIZE_M             = $AF0409
=$af040a				VDMA_SIZE_H             = $AF040A
=$af040b				VDMA_IGNORED            = $AF040B
=$af0408				VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409				VDMA_X_SIZE_H           = $AF0409
=$af040a				VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b				VDMA_Y_SIZE_H           = $AF040B
=$af040c				VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d				VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e				VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f				VDMA_DST_STRIDE_H       = $AF040F ;
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR         = $AF1F80
=$af2000				GRPH_LUT0_PTR           = $AF2000
=$af2400				GRPH_LUT1_PTR           = $AF2400
=$af2800				GRPH_LUT2_PTR           = $AF2800
=$af2c00				GRPH_LUT3_PTR           = $AF2C00
=$af3000				GRPH_LUT4_PTR           = $AF3000
=$af3400				GRPH_LUT5_PTR           = $AF3400
=$af3800				GRPH_LUT6_PTR           = $AF3800
=$af3c00				GRPH_LUT7_PTR           = $AF3C00
=$af4000				GAMMA_B_LUT_PTR         = $AF4000
=$af4100				GAMMA_G_LUT_PTR         = $AF4100
=$af4200				GAMMA_R_LUT_PTR         = $AF4200
=$af5000				TILE_MAP0               = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: tetris.asm


;******  Processing file: interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000143				INT_PENDING_REG3 = $000143 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000147				INT_POL_REG3     = $000147 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014b				INT_EDGE_REG3    = $00014B ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$00014f				INT_MASK_REG3    = $00014F ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: tetris.asm


;******  Processing file: io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808				SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809				SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810				SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820				CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821				CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822				CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: tetris.asm


;******  Processing file: kernel_inc.asm

=$001000				BOOT             = $001000 ; Cold boot routine
=$001004				RESTORE          = $001004 ; Warm boot routine
=$001008				BREAK            = $001008 ; End program and return to command prompt
=$00100c				READY            = $00100C ; Print prompt and wait for keyboard input
=$001010				SCINIT           = $001010 ;
=$001014				IOINIT           = $001014 ;
=$001018				PUTC             = $001018 ; Print a character to the currently selected channel
=$00101c				PUTS             = $00101C ; Print a string to the currently selected channel
=$001020				PUTB             = $001020 ; Output a byte to the currently selected channel
=$001024				PUTBLOCK         = $001024 ; Ouput a binary block to the currently selected channel
=$001028				SETLFS           = $001028 ; Obsolete (done in OPEN)
=$00102c				SETNAM           = $00102C ; Obsolete (done in OPEN)
=$001030				OPEN             = $001030 ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
=$001034				CLOSE            = $001034 ; Close a channel
=$001038				SETIN            = $001038 ; Set the current input channel
=$00103c				SETOUT           = $00103C ; Set the current output channel
=$001040				GETB             = $001040 ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
=$001044				GETBLOCK         = $001044 ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
=$001048				GETCH            = $001048 ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
=$00104c				GETCHW           = $00104C ; Get a character from the input channel. Waits until data received. A=0 and Carry=1 if no data is wating
=$001050				GETCHE           = $001050 ; Get a character from the input channel and echo to the screen. Wait if data is not ready.
=$001054				GETS             = $001054 ; Get a string from the input channel. NULL terminates
=$001058				GETLINE          = $001058 ; Get a line of text from input channel. CR or NULL terminates.
=$00105c				GETFIELD         = $00105C ; Get a field from the input channel. Value in A, CR, or NULL terminates
=$001060				TRIM             = $001060 ; Removes spaces at beginning and end of string.
=$001064				PRINTC           = $001064 ; Print character to screen. Handles terminal commands
=$001068				PRINTS           = $001068 ; Print string to screen. Handles terminal commands
=$00106c				PRINTCR          = $00106C ; Print Carriage Return
=$001070				PRINTF           = $001070 ; Print a float value
=$001074				PRINTI           = $001074 ; Prints integer value in TEMP
=$001078				PRINTH           = $001078 ; Print Hex value in DP variable
=$00107c				PRINTAI          = $00107C ; Prints integer value in A
=$001080				PRINTAH          = $001080 ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
=$001084				LOCATE           = $001084 ;
=$001088				PUSHKEY          = $001088 ;
=$00108c				PUSHKEYS         = $00108C ;
=$001090				CSRRIGHT         = $001090 ;
=$001094				CSRLEFT          = $001094 ;
=$001098				CSRUP            = $001098 ;
=$00109c				CSRDOWN          = $00109C ;
=$0010a0				CSRHOME          = $0010A0 ;
=$0010a4				SCROLLUP         = $0010A4 ; Scroll the screen up one line. Creates an empty line at the bottom.
=$0010a8				CLRSCREEN        = $0010A8 ; Clear the screen
=$0010ac				INITCHLUT        = $0010AC ; Init character look-up table
=$0010b0				INITSUPERIO      = $0010B0 ; Init Super-IO chip
=$0010b4				INITKEYBOARD     = $0010B4 ; Init keyboard
=$0010bc				INITCURSOR       = $0010BC ; Init the Cursors registers
=$0010c0				INITFONTSET      = $0010C0 ; Init the Internal FONT Memory
=$0010c4				INITGAMMATABLE   = $0010C4 ; Init the RGB GAMMA Look Up Table
=$0010c8				INITALLLUT       = $0010C8 ; Init the Graphic Engine (Bitmap/Tile/Sprites) LUT
=$0010cc				INITVKYTXTMODE   = $0010CC ; Init the Text Mode @ Reset Time
=$0010d0				INITVKYGRPMODE   = $0010D0 ; Init the Basic Registers for the Graphic Mode
=$0010f0				F_OPEN           = $0010F0 ; open a file for reading/writing/creating
=$0010f4				F_CREATE         = $0010F4 ; create a new file
=$0010f8				F_CLOSE          = $0010F8 ; close a file (make sure last cluster is written)
=$0010fc				F_WRITE          = $0010FC ; write the current cluster to the file
=$001100				F_READ           = $001100 ; read the next cluster from the file
=$001104				F_DELETE         = $001104 ; delete a file / directory
=$001108				F_DIROPEN        = $001108 ; open a directory and seek the first directory entry
=$00110c				F_DIRNEXT        = $00110C ; seek to the next directory of an open directory
=$001110				F_DIRREAD        = $001110 ; Read the directory entry for the specified file
=$001114				F_DIRWRITE       = $001114 ; Write any changes in the current directory cluster back to the drive
=$001118				F_LOAD           = $001118 ; load a binary file into memory, supports multiple file formats
=$00111c				F_SAVE           = $00111C ; Save memory to a binary file

;******  Return to file: tetris.asm


;******  Processing file: math_def.asm

=$000100				UNSIGNED_MULT_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				UNSIGNED_MULT_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				UNSIGNED_MULT_RESULT= $000104 ;4 Bytes Result of A x B
=$000108				SIGNED_MULT_A       = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				SIGNED_MULT_B       = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				SIGNED_MULT_RESULT  = $00010C ;4 Bytes Result of A x B
=$000110				DIVIDER_0        = $000110 ;0 Byte  Signed divider
=$000110				D0_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  B/A
=$000112				D0_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in B/A
=$000114				D0_RESULT        = $000114 ;2 Bytes Signed quotient result of B/A ex: 7/2 = 3 r 1
=$000116				D0_REMAINDER     = $000116 ;2 Bytes Signed remainder of B/A ex: 1 in 7/2=3 r 1
=$000118				DIVIDER_1        = $000118 ;0 Byte  Unsigned divider
=$000118				D1_OPERAND_A     = $000118 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00011a				D1_OPERAND_B     = $00011A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00011c				D1_RESULT        = $00011C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00011e				D1_REMAINDER     = $00011E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_A          = $000120 ; 4 bytes (32 bit) Accumulator A
=$000124				ADDER_B          = $000124 ; 4 bytes (32 bit) Accumulator B
=$000128				ADDER_R          = $000128 ; 4 bytes (32 bit) Result

;******  Return to file: tetris.asm


;******  Processing file: GABE_Control_Registers_def.asm

=$afe880				GABE_MSTR_CTRL      = $AFE880
=$01					GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02					GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$10					GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80					GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881				GABE_NOTUSED        = $AFE881 ; Reserved for future use
=$afe882				GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883				GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884				GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884				GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885				GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886				GABE_RNG_STAT       = $AFE886 ;
=$80					GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886				GABE_RNG_CTRL       = $AFE886 ;
=$01					GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02					GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887				GABE_SYS_STAT       = $AFE887 ;
=$01					GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02					GABE_SYS_STAT_MID1  = $02     ; Machine ID -- MSB
=$08					GABE_SYS_STAT_EXP   = $08     ; if Zero, there is an Expansion Card Preset
=$40					GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator
=$80					GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator

;******  Return to file: tetris.asm


;******  Processing file: base.asm

.38ff00	18		clc		                CLC
.38ff01	fb		xce		                XCE   ; go into native mode
.38ff02	78		sei		                SEI   ; ignore interrupts
.38ff03	5c 9d 00 16	jmp $16009d	                JML GAME_START
.38ff60					RHIRQ
.38ff60	8b		phb		                PHB
.38ff61	0b		phd		                PHD
.38ff62	48		pha		                PHA
.38ff63	da		phx		                PHX
.38ff64	5a		phy		                PHY
.38ff65	22 00 00 16	jsl $160000	                JSL IRQ_HANDLER
.38ff69	7a		ply		                PLY
.38ff6a	fa		plx		                PLX
.38ff6b	68		pla		                PLA
.38ff6c	2b		pld		                PLD
.38ff6d	ab		plb		                PLB
.38ff6e	40		rti		                RTI
.38ffe0	5c 9d 00 16	jmp $16009d	JUMP_READY      JML GAME_START ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec	00 00				                .word $0000    ; FFEC
>38ffee	60 ff				RVECTOR_IRQ     .addr HIRQ     ; FFEE
.38fff0	5c 9d 00 16	jmp $16009d	RRETURN         JML GAME_START
>38fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: tetris.asm


;******  Processing file: keyboard_def.asm

=$af1064				STATUS_PORT           = $AF1064
=$af1060				KBD_OUT_BUF           = $AF1060
=$af1060				KBD_INPT_BUF          = $AF1060
=$af1064				KBD_CMD_BUF           = $AF1064
=$af1060				KBD_DATA_BUF          = $AF1060
=$af1060				PORT_A                = $AF1060
=$af1061				PORT_B                = $AF1061
=$01					OUT_BUF_FULL          = $01
=$02					INPT_BUF_FULL         = $02
=$04					SYS_FLAG              = $04
=$08					CMD_DATA              = $08
=$10					KEYBD_INH             = $10
=$20					TRANS_TMOUT           = $20
=$40					RCV_TMOUT             = $40
=$80					PARITY_EVEN           = $80
=$10					INH_KEYBOARD          = $10
=$ae					KBD_ENA               = $AE
=$ad					KBD_DIS               = $AD
=$f1					KB_MENU               = $F1
=$f4					KB_ENABLE             = $F4
=$f7					KB_MAKEBREAK          = $F7
=$fe					KB_ECHO               = $FE
=$ff					KB_RESET              = $FF
=$ed					KB_LED_CMD            = $ED
=$aa					KB_OK                 = $AA
=$fa					KB_ACK                = $FA
=$ff					KB_OVERRUN            = $FF
=$fe					KB_RESEND             = $FE
=$f0					KB_BREAK              = $F0
=$10					KB_FA                 = $10
=$20					KB_FE                 = $20
=$40					KB_PR_LED             = $40
>0500					.align 256
>0500	00 00 00 00 00 00 00 00		ScanCode_Press_Set1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>0508	00 00 00 00 00 00 00 00
>0510	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>0518	00 00 00 00 00 00 00 00
>0520	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>0528	00 00 00 00 00 00 00 00
>0530	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00    ; $30
>0538	00 08 00 00 00 00 00 00
>0540	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $00, $04, $00, $00    ; $40
>0548	00 00 00 02 00 04 00 00
>0550	06 00 00 00 00 00 00 00		                      .text $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>0558	00 00 00 00 00 00 00 00
>0560	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>0568	00 00 00 00 00 00 00 00
>0570	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>0578	00 00 00 00 00 00 00 00

;******  Return to file: tetris.asm


;******  Processing file: interrupt_handler.asm

.160000					IRQ_HANDLER
.160000	48		pha		                PHA             ; begin setdp macro
.160001	08		php		                PHP
.160002	c2 20		rep #$20	                REP #$20        ; set A long
.160004	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.160007	5b		tcd		                TCD
.160008	28		plp		                PLP
.160009	68		pla		                PLA             ; end setdp macro
.16000a	a9 00		lda #$00	                LDA #0  ; set the data bank register to 0
.16000c	48		pha		                PHA
.16000d	ab		plb		                PLB
.16000e	e2 20		sep #$20	                SEP #$20        ; set A short
.160010	ad 40 01	lda $0140	                LDA INT_PENDING_REG0
.160013	f0 0f		beq $160024	                BEQ CHECK_PENDING_REG1
.160015	ad 40 01	lda $0140	                LDA INT_PENDING_REG0
.160018	29 01		and #$01	                AND #FNX0_INT00_SOF
.16001a	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.16001c	d0 06		bne $160024	                BNE END_CHECK
.16001e	8d 40 01	sta $0140	                STA INT_PENDING_REG0
.160021	20 79 00	jsr $160079	                JSR SOF_INTERRUPT
.160024					END_CHECK
.160024					CHECK_PENDING_REG1
.160024	e2 20		sep #$20	                SEP #$20        ; set A short
.160026	ad 41 01	lda $0141	                LDA INT_PENDING_REG1
.160029	f0 0f		beq $16003a	                BEQ CHECK_PENDING_REG2   ; BEQ EXIT_IRQ_HANDLE
.16002b	ad 41 01	lda $0141	                LDA INT_PENDING_REG1
.16002e	29 01		and #$01	                AND #FNX1_INT00_KBD
.160030	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.160032	d0 06		bne $16003a	                BNE END_CHECK
.160034	8d 41 01	sta $0141	                STA INT_PENDING_REG1
.160037	20 42 00	jsr $160042	                JSR KEYBOARD_INTERRUPT
.16003a					END_CHECK
.16003a					CHECK_PENDING_REG2
.16003a	e2 20		sep #$20	                SEP #$20        ; set A short
.16003c	ad 42 01	lda $0142	                LDA INT_PENDING_REG2
.16003f	f0 00		beq $160041	                BEQ EXIT_IRQ_HANDLE
.160041					EXIT_IRQ_HANDLE
.160041	6b		rtl		                RTL
.160042					KEYBOARD_INTERRUPT
.160042	a9 00		lda #$00	                LDA #0  ; clear B
.160044	eb		xba		                XBA
.160045	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.160049	8d 88 0f	sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.16004c	aa		tax		                TAX
.16004d	bd 00 05	lda $0500,x	                LDA ScanCode_Press_Set1,X
.160050	8f 8b 00 16	sta $16008b	                STA LAST_KEY
.160054	a2 00 a0	ldx #$a000	                LDX #$A000
.160057	86 17		stx $17		                STX CURSORPOS
.160059	a2 20 00	ldx #$0020	                LDX #$20
.16005c	86 1e		stx $1e		                STX CURCOLOR
.16005e	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.160061	a9 00		lda #$00	                LDA #0
.160063	eb		xba		                XBA
.160064	af 8b 00 16	lda $16008b	                LDA LAST_KEY
.160068	aa		tax		                TAX
.160069	f0 03		beq $16006e	                BEQ DONT_REACT
.16006b	fc 6f 00	jsr ($16006f,x)	                JSR (KEY_JUMP_TABLE,X)
.16006e					    DONT_REACT
.16006e	60		rts		                RTS
.16006f					KEY_JUMP_TABLE
>16006f	a8 01				                .word <>INVALID_KEY
>160071	aa 02				                .word <>MOVE_PIECE_LEFT
>160073	d4 02				                .word <>MOVE_PIECE_RIGHT
>160075	fe 02				                .word <>MOVE_PIECE_DOWN
>160077	10 03				                .word <>ROTATE_PIECE
.160079					SOF_INTERRUPT
.160079	af 9b 00 16	lda $16009b	                LDA GAME_STATE  ; The SOF is still getting called, even when masked
.16007d	d0 03		bne $160082	                BNE SKIP_SOF
.16007f	20 ec 00	jsr $1600ec	                JSR DISPLAY_BOARD
.160082					    SKIP_SOF
.160082	c9 03		cmp #$03	                CMP #3
.160084	d0 03		bne $160089	                BNE SOF_DONE
.160086	20 c7 04	jsr $1604c7	                JSR REMOVE_LINES
.160089					    SOF_DONE
.160089	60		rts		                RTS

;******  Return to file: tetris.asm

>16008a	00				TICK_COUNT      .byte 0
>16008b	00 00				LAST_KEY        .word 0
>16008d	00				BOARDX          .byte 0
>16008e	00				BOARDY          .byte 0
>16008f	00				CURRENT_PIECE   .byte 0
>160090	06 00				PIECE_X         .word 6
>160092	00 00				PIECE_Y         .word 0
>160094	00				PIECE_ROT       .byte 0
>160095	00				PIECE_FIT       .byte 0
>160096	32				GAME_SPEED      .byte 50 ; how many ticks beteen bars falling
>160097	00				PIECE_CNTR      .byte 0  ; we increase the speed of the game for every 10 pieces
>160098	00 00 00			SCORE           .long 0  ; decimal formatted score
>16009b	00				GAME_STATE      .byte 0  ; 0 - running, 1 - game over, 2 - restarting, 3 - display line bonus
>16009c	01				LEVEL           .byte 1
=14					BOARD_WIDTH     = 14
=21					BOARD_HEIGHT    = 21
=43293					START_BOARD     = $A900 + (72-BOARD_WIDTH)/2
=$25					PIECE_VALUE     = $25  ; we're doing BCD additions
=100					LINE_VALUE      = 100
=$60					MSG_ADDR        = $60
=$62					ROT_VAL         = $62
=$63					ROT_VAL2        = $63
=$64					LINE_CNTR       = $64
=$60					DEL_LINE_PTR    = $60
=$66					COPY_LINE_PTR   = $66
.16009d					GAME_START
.16009d	e2 20		sep #$20	                SEP #$20        ; set A short
.16009f	c2 10		rep #$10	                REP #$10        ; set X long
.1600a1	a9 00		lda #$00	                LDA #0
.1600a3	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1600a6	20 3a 06	jsr $16063a	                JSR INIT_GAME
.1600a9	c2 20		rep #$20	                REP #$20        ; set A long
.1600ab	22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.1600af	a9 06 00	lda #$0006	                LDA #6
.1600b2	8f 84 e8 af	sta $afe884	                STA GABE_RNG_SEED_LO ; set the max value from 0 to 6
.1600b6	8f 90 00 16	sta $160090	                STA PIECE_X
.1600ba	22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD
.1600be	e2 20		sep #$20	                SEP #$20        ; set A short
.1600c0	a9 00		lda #$00	                LDA #0
.1600c2	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1600c5	22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1600c9	a9 fe		lda #$fe	                LDA #~( FNX0_INT00_SOF )
.1600cb	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1600cf	a9 fe		lda #$fe	                LDA #~( FNX1_INT00_KBD )
.1600d1	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.1600d5	a9 01		lda #$01	                LDA #1
.1600d7	8f 86 e8 af	sta $afe886	                STA GABE_RNG_CTRL
.1600db	20 86 01	jsr $160186	                JSR PICK_NEXT_PIECE
.1600de	58		cli		                CLI
.1600df					    INFINITE_LOOP
.1600df	ea		nop		                NOP
.1600e0	ea		nop		                NOP
.1600e1	ea		nop		                NOP
.1600e2	af 9b 00 16	lda $16009b	                LDA GAME_STATE
.1600e6	c9 02		cmp #$02	                CMP #2
.1600e8	f0 b3		beq $16009d	                BEQ GAME_START
.1600ea	80 f3		bra $1600df	                BRA INFINITE_LOOP
.1600ec					DISPLAY_BOARD
.1600ec	af 8a 00 16	lda $16008a	                LDA TICK_COUNT
.1600f0	1a		inc a		                INC A
.1600f1	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.1600f5	c9 32		cmp #$32	                CMP #50
.1600f7	d0 0f		bne $160108	                BNE TIMING_DONE
.1600f9	af 92 00 16	lda $160092	                LDA PIECE_Y
.1600fd	1a		inc a		                INC A
.1600fe	8f 92 00 16	sta $160092	                STA PIECE_Y
.160102	a9 00		lda #$00	                LDA #0
.160104	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.160108					    TIMING_DONE
.160108	20 81 03	jsr $160381	                JSR DOES_PIECE_FIT
.16010b	af 95 00 16	lda $160095	                LDA PIECE_FIT
.16010f	f0 68		beq $160179	                BEQ LOGIC_DONE
.160111	af 92 00 16	lda $160092	                LDA PIECE_Y
.160115	3a		dec a		                DEC A
.160116	8f 92 00 16	sta $160092	                STA PIECE_Y
.16011a	d0 03		bne $16011f	                BNE NOT_GAME_OVER
.16011c	4c 52 05	jmp $160552	                JMP GAME_OVER
.16011f					        NOT_GAME_OVER
.16011f	20 2f 03	jsr $16032f	                JSR COPY_PIECE
.160122	c2 20		rep #$20	                REP #$20        ; set A long
.160124	f8		sed		                SED
.160125	18		clc		                CLC
.160126	af 98 00 16	lda $160098	                LDA SCORE
.16012a	69 25 00	adc #$0025	                ADC #PIECE_VALUE
.16012d	8f 98 00 16	sta $160098	                STA SCORE
.160131	d8		cld		                CLD
.160132	e2 20		sep #$20	                SEP #$20        ; set A short
.160134	90 09		bcc $16013f	                BCC NG_CONTINUE
.160136	af 9a 00 16	lda $16009a	                LDA SCORE+2
.16013a	1a		inc a		                INC A
.16013b	8f 9a 00 16	sta $16009a	                STA SCORE+2
.16013f					        NG_CONTINUE
.16013f	20 a9 01	jsr $1601a9	                JSR LOOK_FOR_LINES
.160142	a9 06		lda #$06	                LDA #6
.160144	8f 90 00 16	sta $160090	                STA PIECE_X
.160148	a9 00		lda #$00	                LDA #0
.16014a	8f 92 00 16	sta $160092	                STA PIECE_Y
.16014e	8f 95 00 16	sta $160095	                STA PIECE_FIT
.160152	8f 94 00 16	sta $160094	                STA PIECE_ROT
.160156	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.16015a	20 86 01	jsr $160186	                JSR PICK_NEXT_PIECE
.16015d	af 97 00 16	lda $160097	                LDA PIECE_CNTR
.160161	1a		inc a		                INC A
.160162	8f 97 00 16	sta $160097	                STA PIECE_CNTR
.160166	c9 0a		cmp #$0a	                CMP #10
.160168	d0 0f		bne $160179	                BNE LOGIC_DONE
.16016a	a9 00		lda #$00	                LDA #0
.16016c	8f 97 00 16	sta $160097	                STA PIECE_CNTR
.160170	af 9c 00 16	lda $16009c	                LDA LEVEL
.160174	1a		inc a		                INC A
.160175	8f 9c 00 16	sta $16009c	                STA LEVEL
.160179					    LOGIC_DONE
.160179	20 3a 04	jsr $16043a	                JSR DRAW_BOARD
.16017c	20 db 03	jsr $1603db	                JSR DRAW_PIECE
.16017f	20 83 04	jsr $160483	                JSR DRAW_SCORE
.160182	20 ac 04	jsr $1604ac	                JSR DRAW_LEVEL
.160185	60		rts		                RTS
.160186					    WAIT_LINES
.160186					PICK_NEXT_PIECE
.160186	af 84 e8 af	lda $afe884	                LDA GABE_RNG_DAT_LO
.16018a	29 07		and #$07	                AND #7
.16018c	8f 8f 00 16	sta $16008f	                STA CURRENT_PIECE
.160190	c9 07		cmp #$07	                CMP #7
.160192	f0 f2		beq $160186	                BEQ PICK_NEXT_PIECE
.160194	60		rts		                RTS
.160195					DISPLAY_SYMBOL
.160195	87 17		sta [$17]	                STA [CURSORPOS]
.160197	c2 20		rep #$20	                REP #$20        ; set A long
.160199	a5 17		lda $17		                LDA CURSORPOS
.16019b	18		clc		                CLC
.16019c	69 00 20	adc #$2000	                ADC #$2000
.16019f	85 1f		sta $1f		                STA COLORPOS
.1601a1	e2 20		sep #$20	                SEP #$20        ; set A short
.1601a3	a5 1e		lda $1e		                LDA CURCOLOR
.1601a5	87 1f		sta [$1f]	                STA [COLORPOS]
.1601a7	60		rts		                RTS
.1601a8					INVALID_KEY
.1601a8	60		rts		                RTS
.1601a9					LOOK_FOR_LINES
.1601a9	64 63		stz $63		                STZ ROT_VAL2 ; line count max 4
.1601ab	64 64		stz $64		                STZ LINE_CNTR
.1601ad					    INIT_LINE_CHECK
.1601ad	a0 00 00	ldy #$0000	                LDY #0
.1601b0	64 62		stz $62		                STZ ROT_VAL  ; column count max 10
.1601b2	c2 20		rep #$20	                REP #$20        ; set A long
.1601b4	af 92 00 16	lda $160092	                LDA PIECE_Y
.1601b8	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.1601bb	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.1601be	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.1601c1	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.1601c4	aa		tax		                TAX
.1601c5	e2 20		sep #$20	                SEP #$20        ; set A short
.1601c7					    CHK_NEXT_COL
.1601c7	bf c5 06 16	lda $1606c5,x	                LDA BOARD,X
.1601cb	f0 0f		beq $1601dc	                BEQ CHK_NEXT_LINE
.1601cd	e6 62		inc $62		                INC ROT_VAL
.1601cf	e8		inx		                INX
.1601d0	c8		iny		                INY
.1601d1	c0 0e 00	cpy #$000e	                CPY #BOARD_WIDTH
.1601d4	d0 f1		bne $1601c7	                BNE CHK_NEXT_COL
.1601d6	a5 62		lda $62		                LDA ROT_VAL
.1601d8	c9 0e		cmp #$0e	                CMP #BOARD_WIDTH
.1601da	f0 16		beq $1601f2	                BEQ LINE_FOUND
.1601dc					    CHK_NEXT_LINE
.1601dc	e6 63		inc $63		                INC ROT_VAL2
.1601de	af 92 00 16	lda $160092	                LDA PIECE_Y
.1601e2	1a		inc a		                INC A
.1601e3	8f 92 00 16	sta $160092	                STA PIECE_Y
.1601e7	c9 14		cmp #$14	                CMP #BOARD_HEIGHT-1
.1601e9	f0 06		beq $1601f1	                BEQ LOOK_LINE_DONE
.1601eb	a5 63		lda $63		                LDA ROT_VAL2
.1601ed	c9 04		cmp #$04	                CMP #4
.1601ef	d0 bc		bne $1601ad	                BNE INIT_LINE_CHECK
.1601f1					    LOOK_LINE_DONE
.1601f1	60		rts		                RTS
.1601f2					    LINE_FOUND
.1601f2	e6 64		inc $64		                INC LINE_CNTR
.1601f4	a9 03		lda #$03	                LDA #3
.1601f6	8f 9b 00 16	sta $16009b	                STA GAME_STATE
.1601fa	c2 20		rep #$20	                REP #$20        ; set A long
.1601fc	af 92 00 16	lda $160092	                LDA PIECE_Y
.160200	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.160203	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.160206	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.160209	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.16020c	aa		tax		                TAX
.16020d	e2 20		sep #$20	                SEP #$20        ; set A short
.16020f	e8		inx		                INX
.160210	e8		inx		                INX ; skip the first two columns
.160211	a0 00 00	ldy #$0000	                LDY #0
.160214	a9 3d		lda #$3d	                LDA #'='
.160216					        LINE_CHAR
.160216	9f c5 06 16	sta $1606c5,x	                STA BOARD,X
.16021a	e8		inx		                INX
.16021b	c8		iny		                INY
.16021c	c0 0a 00	cpy #$000a	                CPY #BOARD_WIDTH-4
.16021f	d0 f5		bne $160216	                BNE LINE_CHAR
.160221	80 b9		bra $1601dc	                BRA CHK_NEXT_LINE
.160223					GET_PIECE_VALUE
.160223	a9 00		lda #$00	                LDA #0
.160225	eb		xba		                XBA
.160226	af 94 00 16	lda $160094	                LDA PIECE_ROT
.16022a	d0 05		bne $160231	                BNE ROT_NEXT
.16022c	bf eb 07 16	lda $1607eb,x	                LDA PIECE0,X  ; ROTATION 0
.160230	60		rts		                RTS
.160231					    ROT_NEXT
.160231	c9 01		cmp #$01	                CMP #1
.160233	d0 2b		bne $160260	                BNE ROT_2
.160235	da		phx		                PHX
.160236	8a		txa		                TXA
.160237	29 f0		and #$f0	                AND #$F0
.160239	85 63		sta $63		                STA ROT_VAL2
.16023b	8a		txa		                TXA
.16023c	29 03		and #$03	                AND #3
.16023e	aa		tax		                TAX
.16023f	38		sec		                SEC
.160240	a9 0c		lda #$0c	                LDA #12       ; ROTATION 1
.160242					        CMP_R1
.160242	e0 00 00	cpx #$0000	                CPX #0
.160245	f0 05		beq $16024c	                BEQ R1_DONE
.160247	e9 04		sbc #$04	                SBC #4
.160249	ca		dex		                DEX
.16024a	80 f6		bra $160242	                BRA CMP_R1
.16024c					        R1_DONE
.16024c	85 62		sta $62		                STA ROT_VAL
.16024e	a3 01		lda $01,s	                LDA 1,S
.160250	4a		lsr a		                LSR A
.160251	4a		lsr a		                LSR A
.160252	29 03		and #$03	                AND #3
.160254	18		clc		                CLC
.160255	65 62		adc $62		                ADC ROT_VAL
.160257	65 63		adc $63		                ADC ROT_VAL2
.160259	aa		tax		                TAX
.16025a	bf eb 07 16	lda $1607eb,x	                LDA PIECE0,X  ; ROTATION 1
.16025e	fa		plx		                PLX
.16025f	60		rts		                RTS
.160260					    ROT_2
.160260	c9 02		cmp #$02	                CMP #2
.160262	d0 1a		bne $16027e	                BNE ROT_3
.160264	da		phx		                PHX
.160265	8a		txa		                TXA
.160266	29 f0		and #$f0	                AND #$F0
.160268	85 63		sta $63		                STA ROT_VAL2
.16026a	8a		txa		                TXA
.16026b	29 0f		and #$0f	                AND #$F
.16026d	85 62		sta $62		                STA ROT_VAL
.16026f	38		sec		                SEC
.160270	a9 0f		lda #$0f	                LDA #$F
.160272	e5 62		sbc $62		                SBC ROT_VAL
.160274	18		clc		                CLC
.160275	65 63		adc $63		                ADC ROT_VAL2
.160277	aa		tax		                TAX
.160278	bf eb 07 16	lda $1607eb,x	                LDA PIECE0,X  ; ROTATION 2
.16027c	fa		plx		                PLX
.16027d	60		rts		                RTS
.16027e					    ROT_3
.16027e	da		phx		                PHX
.16027f	8a		txa		                TXA
.160280	29 f0		and #$f0	                AND #$F0
.160282	85 63		sta $63		                STA ROT_VAL2
.160284	8a		txa		                TXA
.160285	29 0c		and #$0c	                AND #$C
.160287	4a		lsr a		                LSR A
.160288	4a		lsr a		                LSR A
.160289	85 62		sta $62		                STA ROT_VAL
.16028b	a3 01		lda $01,s	                LDA 1,S
.16028d	29 03		and #$03	                AND #3
.16028f	aa		tax		                TAX
.160290	a9 03		lda #$03	                LDA #3       ; ROTATION 3
.160292					        CMP_R3
.160292	e0 00 00	cpx #$0000	                CPX #0
.160295	f0 06		beq $16029d	                BEQ R3_DONE
.160297	18		clc		                CLC
.160298	69 04		adc #$04	                ADC #4
.16029a	ca		dex		                DEX
.16029b	80 f5		bra $160292	                BRA CMP_R3
.16029d					        R3_DONE
.16029d	38		sec		                SEC
.16029e	e5 62		sbc $62		                SBC ROT_VAL
.1602a0	18		clc		                CLC
.1602a1	65 63		adc $63		                ADC ROT_VAL2
.1602a3	aa		tax		                TAX
.1602a4	bf eb 07 16	lda $1607eb,x	                LDA PIECE0,X  ; ROTATION 3
.1602a8	fa		plx		                PLX
.1602a9	60		rts		                RTS
.1602aa					MOVE_PIECE_LEFT
.1602aa	af 9b 00 16	lda $16009b	                LDA GAME_STATE
.1602ae	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.1602b0	f0 21		beq $1602d3	                BEQ MOVE_LEFT_DONE
.1602b2	af 90 00 16	lda $160090	                LDA PIECE_X
.1602b6	3a		dec a		                DEC A
.1602b7	8f 90 00 16	sta $160090	                STA PIECE_X
.1602bb	20 81 03	jsr $160381	                JSR DOES_PIECE_FIT
.1602be	af 95 00 16	lda $160095	                LDA PIECE_FIT
.1602c2	f0 0f		beq $1602d3	                BEQ MOVE_LEFT_DONE
.1602c4	af 90 00 16	lda $160090	                LDA PIECE_X
.1602c8	1a		inc a		                INC A
.1602c9	8f 90 00 16	sta $160090	                STA PIECE_X
.1602cd	a9 00		lda #$00	                LDA #0
.1602cf	8f 95 00 16	sta $160095	                STA PIECE_FIT
.1602d3					    MOVE_LEFT_DONE
.1602d3	60		rts		                RTS
.1602d4					MOVE_PIECE_RIGHT
.1602d4	af 9b 00 16	lda $16009b	                LDA GAME_STATE
.1602d8	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.1602da	f0 21		beq $1602fd	                BEQ MOVE_RIGHT_DONE
.1602dc	af 90 00 16	lda $160090	                LDA PIECE_X
.1602e0	1a		inc a		                INC A
.1602e1	8f 90 00 16	sta $160090	                STA PIECE_X
.1602e5	20 81 03	jsr $160381	                JSR DOES_PIECE_FIT
.1602e8	af 95 00 16	lda $160095	                LDA PIECE_FIT
.1602ec	f0 0f		beq $1602fd	                BEQ MOVE_RIGHT_DONE
.1602ee	af 90 00 16	lda $160090	                LDA PIECE_X
.1602f2	3a		dec a		                DEC A
.1602f3	8f 90 00 16	sta $160090	                STA PIECE_X
.1602f7	a9 00		lda #$00	                LDA #0
.1602f9	8f 95 00 16	sta $160095	                STA PIECE_FIT
.1602fd					    MOVE_RIGHT_DONE
.1602fd	60		rts		                RTS
.1602fe					MOVE_PIECE_DOWN
.1602fe	af 9b 00 16	lda $16009b	                LDA GAME_STATE
.160302	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.160304	f0 09		beq $16030f	                BEQ DOWN_DONE
.160306	af 92 00 16	lda $160092	                LDA PIECE_Y
.16030a	1a		inc a		                INC A
.16030b	8f 92 00 16	sta $160092	                STA PIECE_Y
.16030f					    DOWN_DONE
.16030f	60		rts		                RTS
.160310					ROTATE_PIECE
.160310	af 9b 00 16	lda $16009b	                LDA GAME_STATE
.160314	c9 01		cmp #$01	                CMP #1 ; user pressed the space bar to restart the game
.160316	d0 07		bne $16031f	                BNE ROT_START
.160318	a9 02		lda #$02	                LDA #2
.16031a	8f 9b 00 16	sta $16009b	                STA GAME_STATE
.16031e	60		rts		                RTS
.16031f					    ROT_START
.16031f	af 94 00 16	lda $160094	                LDA PIECE_ROT
.160323	1a		inc a		                INC A
.160324	c9 04		cmp #$04	                CMP #4
.160326	d0 02		bne $16032a	                BNE ROTATE_DONE
.160328	a9 00		lda #$00	                LDA #0
.16032a					    ROTATE_DONE
.16032a	8f 94 00 16	sta $160094	                STA PIECE_ROT
.16032e	60		rts		                RTS
.16032f					COPY_PIECE
.16032f	af 8f 00 16	lda $16008f	                LDA CURRENT_PIECE
.160333	0a		asl a		                ASL A
.160334	0a		asl a		                ASL A
.160335	0a		asl a		                ASL A
.160336	0a		asl a		                ASL A
.160337	aa		tax		                TAX
.160338	c2 20		rep #$20	                REP #$20        ; set A long
.16033a	af 92 00 16	lda $160092	                LDA PIECE_Y
.16033e	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.160341	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.160344	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.160347	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.16034a	18		clc		                CLC
.16034b	6f 90 00 16	adc $160090	                ADC PIECE_X
.16034f	a8		tay		                TAY
.160350	a9 00 00	lda #$0000	                LDA #0
.160353	e2 20		sep #$20	                SEP #$20        ; set A short
.160355					    NEXT_COPY
.160355	20 23 02	jsr $160223	                JSR GET_PIECE_VALUE
.160358	c9 00		cmp #$00	                CMP #0
.16035a	f0 0e		beq $16036a	                BEQ SKIP_COPY
.16035c	da		phx		                PHX
.16035d	bb		tyx		                TYX
.16035e	18		clc		                CLC
.16035f	af 8f 00 16	lda $16008f	                LDA CURRENT_PIECE
.160363	69 41		adc #$41	                ADC #65
.160365	9f c5 06 16	sta $1606c5,x	                STA BOARD,X
.160369	fa		plx		                PLX
.16036a					        SKIP_COPY
.16036a	e8		inx		                INX
.16036b	c8		iny		                INY
.16036c	8a		txa		                TXA
.16036d	29 03		and #$03	                AND #3
.16036f	d0 e4		bne $160355	                BNE NEXT_COPY
.160371	c2 20		rep #$20	                REP #$20        ; set A long
.160373	98		tya		                TYA
.160374	18		clc		                CLC
.160375	69 0a 00	adc #$000a	                ADC #BOARD_WIDTH-4
.160378	a8		tay		                TAY
.160379	e2 20		sep #$20	                SEP #$20        ; set A short
.16037b	8a		txa		                TXA
.16037c	29 0f		and #$0f	                AND #$F
.16037e	d0 d5		bne $160355	                BNE NEXT_COPY
.160380	60		rts		                RTS
.160381					DOES_PIECE_FIT
.160381	a9 00		lda #$00	                LDA #0
.160383	eb		xba		                XBA
.160384	af 8f 00 16	lda $16008f	                LDA CURRENT_PIECE
.160388	0a		asl a		                ASL A
.160389	0a		asl a		                ASL A
.16038a	0a		asl a		                ASL A
.16038b	0a		asl a		                ASL A
.16038c	aa		tax		                TAX
.16038d	c2 20		rep #$20	                REP #$20        ; set A long
.16038f	af 92 00 16	lda $160092	                LDA PIECE_Y
.160393	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.160396	a9 0e 00	lda #$000e	                LDA #BOARD_WIDTH
.160399	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.16039c	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.16039f	18		clc		                CLC
.1603a0	6f 90 00 16	adc $160090	                ADC PIECE_X
.1603a4	a8		tay		                TAY
.1603a5	a9 00 00	lda #$0000	                LDA #0
.1603a8	e2 20		sep #$20	                SEP #$20        ; set A short
.1603aa					    NEXT_COLLISION
.1603aa	20 23 02	jsr $160223	                JSR GET_PIECE_VALUE
.1603ad	c9 00		cmp #$00	                CMP #0
.1603af	f0 0b		beq $1603bc	                BEQ SKIP_BYTE
.1603b1	da		phx		                PHX
.1603b2	bb		tyx		                TYX
.1603b3	bf c5 06 16	lda $1606c5,x	                LDA BOARD,X
.1603b7	fa		plx		                PLX
.1603b8	c9 00		cmp #$00	                CMP #0
.1603ba	d0 18		bne $1603d4	                BNE OCCUPIED
.1603bc					    SKIP_BYTE
.1603bc	e8		inx		                INX
.1603bd	c8		iny		                INY
.1603be	8a		txa		                TXA
.1603bf	29 03		and #$03	                AND #3
.1603c1	d0 e7		bne $1603aa	                BNE NEXT_COLLISION
.1603c3	c2 20		rep #$20	                REP #$20        ; set A long
.1603c5	98		tya		                TYA
.1603c6	18		clc		                CLC
.1603c7	69 0a 00	adc #$000a	                ADC #BOARD_WIDTH-4
.1603ca	a8		tay		                TAY
.1603cb	e2 20		sep #$20	                SEP #$20        ; set A short
.1603cd	8a		txa		                TXA
.1603ce	29 0f		and #$0f	                AND #$F
.1603d0	d0 d8		bne $1603aa	                BNE NEXT_COLLISION
.1603d2	80 06		bra $1603da	                BRA PF_DONE
.1603d4					    OCCUPIED
.1603d4	a9 01		lda #$01	                LDA #1
.1603d6	8f 95 00 16	sta $160095	                STA PIECE_FIT
.1603da					    PF_DONE
.1603da	60		rts		                RTS
.1603db					DRAW_PIECE
.1603db	a9 63		lda #$63	                LDA #$63
.1603dd	85 1e		sta $1e		                STA CURCOLOR
.1603df	c2 20		rep #$20	                REP #$20        ; set A long
.1603e1	a9 1d a9	lda #$a91d	                LDA #START_BOARD
.1603e4	18		clc		                CLC
.1603e5	6f 90 00 16	adc $160090	                ADC PIECE_X
.1603e9	85 17		sta $17		                STA CURSORPOS
.1603eb	a9 80 00	lda #$0080	                LDA #128
.1603ee	8d 00 01	sta $0100	                STA UNSIGNED_MULT_A
.1603f1	af 92 00 16	lda $160092	                LDA PIECE_Y
.1603f5	8d 02 01	sta $0102	                STA UNSIGNED_MULT_B
.1603f8	ad 04 01	lda $0104	                LDA UNSIGNED_MULT_RESULT
.1603fb	18		clc		                CLC
.1603fc	65 17		adc $17		                ADC CURSORPOS
.1603fe	85 17		sta $17		                STA CURSORPOS
.160400	e2 20		sep #$20	                SEP #$20        ; set A short
.160402	a9 00		lda #$00	                LDA #0
.160404	eb		xba		                XBA
.160405	af 8f 00 16	lda $16008f	                LDA CURRENT_PIECE
.160409	0a		asl a		                ASL A
.16040a	0a		asl a		                ASL A
.16040b	0a		asl a		                ASL A
.16040c	0a		asl a		                ASL A
.16040d	aa		tax		                TAX
.16040e					        NEXT_PIECE_SYMBOL
.16040e	20 23 02	jsr $160223	                JSR GET_PIECE_VALUE
.160411	c9 00		cmp #$00	                CMP #0
.160413	f0 0a		beq $16041f	                BEQ SKIP_DRAW
.160415	af 8f 00 16	lda $16008f	                LDA CURRENT_PIECE
.160419	18		clc		                CLC
.16041a	69 41		adc #$41	                ADC #65
.16041c	20 95 01	jsr $160195	                JSR DISPLAY_SYMBOL
.16041f					        SKIP_DRAW
.16041f	e8		inx		                INX
.160420	e6 17		inc $17		                INC CURSORPOS
.160422	8a		txa		                TXA
.160423	29 03		and #$03	                AND #3
.160425	d0 e7		bne $16040e	                BNE NEXT_PIECE_SYMBOL
.160427	c2 20		rep #$20	                REP #$20        ; set A long
.160429	a5 17		lda $17		                LDA CURSORPOS
.16042b	18		clc		                CLC
.16042c	69 7c 00	adc #$007c	                ADC #124
.16042f	85 17		sta $17		                STA CURSORPOS
.160431	8a		txa		                TXA
.160432	29 0f 00	and #$000f	                AND #$F
.160435	e2 20		sep #$20	                SEP #$20        ; set A short
.160437	d0 d5		bne $16040e	                BNE NEXT_PIECE_SYMBOL
.160439	60		rts		                RTS
.16043a					DRAW_BOARD
.16043a	a9 40		lda #$40	                LDA #$40
.16043c	85 1e		sta $1e		                STA CURCOLOR
.16043e	a2 1d a9	ldx #$a91d	                LDX #START_BOARD
.160441	86 17		stx $17		                STX CURSORPOS
.160443	a2 00 00	ldx #$0000	                LDX #0
.160446	a9 00		lda #$00	                LDA #0
.160448	8f 8e 00 16	sta $16008e	                STA BOARDY
.16044c					    NEXT_ROW
.16044c	a9 00		lda #$00	                LDA #0
.16044e	8f 8d 00 16	sta $16008d	                STA BOARDX
.160452					        NEXT_SYMBOL
.160452	bf c5 06 16	lda $1606c5,x	                LDA BOARD,X
.160456	20 95 01	jsr $160195	                JSR DISPLAY_SYMBOL
.160459	e8		inx		                INX
.16045a	e6 17		inc $17		                INC CURSORPOS
.16045c	af 8d 00 16	lda $16008d	                LDA BOARDX
.160460	1a		inc a		                INC A
.160461	8f 8d 00 16	sta $16008d	                STA BOARDX
.160465	c9 0e		cmp #$0e	                CMP #BOARD_WIDTH
.160467	d0 e9		bne $160452	                BNE NEXT_SYMBOL
.160469	c2 20		rep #$20	                REP #$20        ; set A long
.16046b	a5 17		lda $17		                LDA CURSORPOS
.16046d	18		clc		                CLC
.16046e	69 72 00	adc #$0072	                ADC #128-BOARD_WIDTH
.160471	85 17		sta $17		                STA CURSORPOS
.160473	e2 20		sep #$20	                SEP #$20        ; set A short
.160475	af 8e 00 16	lda $16008e	                LDA BOARDY
.160479	1a		inc a		                INC A
.16047a	8f 8e 00 16	sta $16008e	                STA BOARDY
.16047e	c9 15		cmp #$15	                CMP #BOARD_HEIGHT
.160480	d0 ca		bne $16044c	                BNE NEXT_ROW
.160482	60		rts		                RTS
.160483					DRAW_SCORE
.160483	a0 b8 a2	ldy #$a2b8	                LDY #$A000 + 128*5 + 56
.160486	84 17		sty $17		                STY CURSORPOS
.160488	a9 20		lda #$20	                LDA #$20
.16048a	85 1e		sta $1e		                STA CURCOLOR
.16048c	a0 ac 06	ldy #$06ac	                LDY #<>SCORE_MSG
.16048f	84 60		sty $60		                STY MSG_ADDR
.160491	20 3e 05	jsr $16053e	                JSR DISPLAY_MSG
.160494	e6 17		inc $17		                INC CURSORPOS
.160496	af 9a 00 16	lda $16009a	                LDA SCORE + 2
.16049a	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.16049d	af 99 00 16	lda $160099	                LDA SCORE + 1
.1604a1	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.1604a4	af 98 00 16	lda $160098	                LDA SCORE
.1604a8	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.1604ab	60		rts		                RTS
.1604ac					DRAW_LEVEL
.1604ac	a0 b8 a3	ldy #$a3b8	                LDY #$A000 + 128*7 + 56
.1604af	84 17		sty $17		                STY CURSORPOS
.1604b1	a9 20		lda #$20	                LDA #$20
.1604b3	85 1e		sta $1e		                STA CURCOLOR
.1604b5	a0 b3 06	ldy #$06b3	                LDY #<>LEVEL_MSG
.1604b8	84 60		sty $60		                STY MSG_ADDR
.1604ba	20 3e 05	jsr $16053e	                JSR DISPLAY_MSG
.1604bd	e6 17		inc $17		                INC CURSORPOS
.1604bf	af 9c 00 16	lda $16009c	                LDA LEVEL
.1604c3	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.1604c6	60		rts		                RTS
.1604c7					REMOVE_LINES
.1604c7	af 8a 00 16	lda $16008a	                LDA TICK_COUNT
.1604cb	1a		inc a		                INC A
.1604cc	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.1604d0	c9 01		cmp #$01	                CMP #1
.1604d2	d0 23		bne $1604f7	                BNE WAIT_FOR_50
.1604d4	a0 b8 a5	ldy #$a5b8	                LDY #$A000 + 128*11 + 56
.1604d7	84 17		sty $17		                STY CURSORPOS
.1604d9	a9 20		lda #$20	                LDA #$20
.1604db	85 1e		sta $1e		                STA CURCOLOR
.1604dd	a0 ba 06	ldy #$06ba	                LDY #<>BONUS_MSG
.1604e0	84 60		sty $60		                STY MSG_ADDR
.1604e2	20 3e 05	jsr $16053e	                JSR DISPLAY_MSG
.1604e5	e6 17		inc $17		                INC CURSORPOS
.1604e7	a6 64		ldx $64		                LDX LINE_CNTR
.1604e9	bf 9d 06 16	lda $16069d,x	                LDA BONUS,X
.1604ed	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.1604f0	a9 00		lda #$00	                LDA #0
.1604f2	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.1604f5	80 46		bra $16053d	                BRA SKIP_DELETE_LINES
.1604f7					    WAIT_FOR_50
.1604f7	c9 32		cmp #$32	                CMP #50
.1604f9	d0 42		bne $16053d	                BNE SKIP_DELETE_LINES
.1604fb	a0 b8 a5	ldy #$a5b8	                LDY #$A000 + 128*11 + 56
.1604fe	84 17		sty $17		                STY CURSORPOS
.160500	a9 00		lda #$00	                LDA #0
.160502	a0 00 00	ldy #$0000	                LDY #0
.160505					        CLEAR_BONUS_LP
.160505	97 17		sta [$17],y	                STA [CURSORPOS],Y
.160507	c8		iny		                INY
.160508	c0 10 00	cpy #$0010	                CPY #16
.16050b	d0 f8		bne $160505	                BNE CLEAR_BONUS_LP
.16050d	a6 64		ldx $64		                LDX LINE_CNTR
.16050f	bf 9d 06 16	lda $16069d,x	                LDA BONUS,X
.160513	eb		xba		                XBA
.160514	a9 00		lda #$00	                LDA #0
.160516	c2 20		rep #$20	                REP #$20        ; set A long
.160518	f8		sed		                SED
.160519	18		clc		                CLC
.16051a	6f 98 00 16	adc $160098	                ADC SCORE
.16051e	8f 98 00 16	sta $160098	                STA SCORE
.160522	d8		cld		                CLD
.160523	e2 20		sep #$20	                SEP #$20        ; set A short
.160525	90 09		bcc $160530	                BCC BONUS_CONTINUE
.160527	af 9a 00 16	lda $16009a	                LDA SCORE+2
.16052b	1a		inc a		                INC A
.16052c	8f 9a 00 16	sta $16009a	                STA SCORE+2
.160530					        BONUS_CONTINUE
.160530	20 f2 05	jsr $1605f2	                JSR DELETE_LINES
.160533	a9 00		lda #$00	                LDA #0
.160535	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.160539	8f 9b 00 16	sta $16009b	                STA GAME_STATE
.16053d					    SKIP_DELETE_LINES
.16053d	60		rts		                RTS
.16053e					DISPLAY_MSG
.16053e	8b		phb		                PHB
.16053f	a9 16		lda #$16	                LDA #`SCORE_MSG
.160541	48		pha		                PHA
.160542	ab		plb		                PLB
.160543					    MSG_LOOP
.160543	b2 60		lda ($60)	                LDA (MSG_ADDR)
.160545	f0 09		beq $160550	                BEQ MSG_DONE
.160547	20 95 01	jsr $160195	                JSR DISPLAY_SYMBOL
.16054a	e6 17		inc $17		                INC CURSORPOS
.16054c	e6 60		inc $60		                INC MSG_ADDR
.16054e	80 f3		bra $160543	                BRA MSG_LOOP
.160550	ab		plb		    MSG_DONE    PLB
.160551	60		rts		                RTS
.160552					GAME_OVER
.160552	a9 ff		lda #$ff	                LDA #$FF
.160554	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.160558	a9 01		lda #$01	                LDA #1
.16055a	8f 9b 00 16	sta $16009b	                STA GAME_STATE
.16055e	22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.160562	a0 1f ad	ldy #$ad1f	                LDY #$A000 + 128*26 + 31
.160565	84 17		sty $17		                STY CURSORPOS
.160567	a9 20		lda #$20	                LDA #$20
.160569	85 1e		sta $1e		                STA CURCOLOR
.16056b	a0 a2 06	ldy #$06a2	                LDY #<>GAME_OVER_MSG
.16056e	84 60		sty $60		                STY MSG_ADDR
.160570	20 3e 05	jsr $16053e	                JSR DISPLAY_MSG
.160573	a0 9d ad	ldy #$ad9d	                LDY #$A000 + 128*27 + 29
.160576	84 17		sty $17		                STY CURSORPOS
.160578	a9 20		lda #$20	                LDA #$20
.16057a	85 1e		sta $1e		                STA CURCOLOR
.16057c	a0 ac 06	ldy #$06ac	                LDY #<>SCORE_MSG
.16057f	84 60		sty $60		                STY MSG_ADDR
.160581	20 3e 05	jsr $16053e	                JSR DISPLAY_MSG
.160584	e6 17		inc $17		                INC CURSORPOS
.160586	af 9a 00 16	lda $16009a	                LDA SCORE + 2
.16058a	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.16058d	af 99 00 16	lda $160099	                LDA SCORE + 1
.160591	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.160594	af 98 00 16	lda $160098	                LDA SCORE
.160598	20 cc 05	jsr $1605cc	                JSR DISPLAY_HEX
.16059b	a9 00		lda #$00	                LDA #0
.16059d	8f 92 00 16	sta $160092	                STA PIECE_Y
.1605a1	a2 02 00	ldx #$0002	                LDX #2
.1605a4					        CLEAR_BOARD_ROW
.1605a4	a0 00 00	ldy #$0000	                LDY #0
.1605a7	a9 00		lda #$00	                LDA #0
.1605a9					        CLEAR_BOARD_COL
.1605a9	9f c5 06 16	sta $1606c5,x	                STA BOARD,X
.1605ad	e8		inx		                INX
.1605ae	c8		iny		                INY
.1605af	c0 0a 00	cpy #$000a	                CPY #10
.1605b2	d0 f5		bne $1605a9	                BNE CLEAR_BOARD_COL
.1605b4	e8		inx		                INX
.1605b5	e8		inx		                INX
.1605b6	e8		inx		                INX
.1605b7	e8		inx		                INX
.1605b8	af 92 00 16	lda $160092	                LDA PIECE_Y
.1605bc	1a		inc a		                INC A
.1605bd	8f 92 00 16	sta $160092	                STA PIECE_Y
.1605c1	c9 14		cmp #$14	                CMP #BOARD_HEIGHT-1
.1605c3	d0 df		bne $1605a4	                BNE CLEAR_BOARD_ROW
.1605c5	a9 00		lda #$00	                LDA #0
.1605c7	8f 92 00 16	sta $160092	                STA PIECE_Y
.1605cb	60		rts		                RTS
.1605cc					DISPLAY_HEX
.1605cc	48		pha		                PHA
.1605cd	eb		xba		                XBA
.1605ce	a9 00		lda #$00	                LDA #0
.1605d0	eb		xba		                XBA
.1605d1	29 f0		and #$f0	                AND #$F0
.1605d3	4a		lsr a		                LSR A
.1605d4	4a		lsr a		                LSR A
.1605d5	4a		lsr a		                LSR A
.1605d6	4a		lsr a		                LSR A
.1605d7	aa		tax		                TAX
.1605d8	bf 8d 06 16	lda $16068d,x	                LDA HEX_VALUES,X
.1605dc	20 95 01	jsr $160195	                JSR DISPLAY_SYMBOL
.1605df	e6 17		inc $17		                INC CURSORPOS
.1605e1	a9 00		lda #$00	                LDA #0  ; clear B
.1605e3	eb		xba		                XBA
.1605e4	68		pla		                PLA
.1605e5	29 0f		and #$0f	                AND #$F
.1605e7	aa		tax		                TAX
.1605e8	bf 8d 06 16	lda $16068d,x	                LDA HEX_VALUES,X
.1605ec	20 95 01	jsr $160195	                JSR DISPLAY_SYMBOL
.1605ef	e6 17		inc $17		                INC CURSORPOS
.1605f1	60		rts		                RTS
.1605f2					DELETE_LINES
.1605f2	c2 20		rep #$20	                REP #$20        ; set A long
.1605f4	a9 00 00	lda #$0000	                LDA #0
.1605f7	eb		xba		                XBA
.1605f8	a5 64		lda $64		                LDA LINE_CNTR
.1605fa	f0 3b		beq $160637	                BEQ DELETE_LINES_DONE
.1605fc	a9 0a 01	lda #$010a	                LDA #BOARD_WIDTH * (BOARD_HEIGHT-2)
.1605ff					        LOOK_UP
.1605ff	8f c3 06 16	sta $1606c3	                STA BYTE_CNTR
.160603					        CHECK_NEXT
.160603	aa		tax		                TAX
.160604	e8		inx		                INX
.160605	e8		inx		                INX
.160606	bf c5 06 16	lda $1606c5,x	                LDA @lBOARD,X
.16060a	c9 3d 3d	cmp #$3d3d	                CMP #'=='
.16060d	d0 1e		bne $16062d	                BNE DONT_DELETE
.16060f	a9 c5 06	lda #$06c5	                LDA #<>BOARD
.160612	18		clc		                CLC
.160613	6f c3 06 16	adc $1606c3	                ADC BYTE_CNTR
.160617	aa		tax		                TAX
.160618	69 0e 00	adc #$000e	                ADC #BOARD_WIDTH
.16061b	a8		tay		                TAY
.16061c	af c3 06 16	lda $1606c3	                LDA BYTE_CNTR
.160620	44 16 16	mvp $16,$16	                MVP `BOARD,`BOARD
.160623	af c3 06 16	lda $1606c3	                LDA BYTE_CNTR
.160627	c6 64		dec $64		                DEC LINE_CNTR
.160629	d0 d8		bne $160603	                BNE CHECK_NEXT
.16062b	80 0a		bra $160637	                BRA DELETE_LINES_DONE
.16062d					        DONT_DELETE
.16062d	af c3 06 16	lda $1606c3	                LDA BYTE_CNTR
.160631	38		sec		                SEC
.160632	e9 0e 00	sbc #$000e	                SBC #BOARD_WIDTH
.160635	80 c8		bra $1605ff	                BRA LOOK_UP
.160637					    DELETE_LINES_DONE
.160637	e2 20		sep #$20	                SEP #$20        ; set A short
.160639	60		rts		                RTS
.16063a					INIT_GAME
.16063a	a9 32		lda #$32	                LDA #50
.16063c	8f 96 00 16	sta $160096	                STA GAME_SPEED
.160640	a9 00		lda #$00	                LDA #0       ;Set Cursor Disabled
.160642	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG
.160646	8f 92 00 16	sta $160092	                STA PIECE_Y
.16064a	8f 95 00 16	sta $160095	                STA PIECE_FIT
.16064e	8f 8a 00 16	sta $16008a	                STA TICK_COUNT
.160652	8f 9b 00 16	sta $16009b	                STA GAME_STATE
.160656	8f 98 00 16	sta $160098	                STA SCORE
.16065a	8f 99 00 16	sta $160099	                STA SCORE + 1
.16065e	8f 9a 00 16	sta $16009a	                STA SCORE + 2
.160662	a9 01		lda #$01	                LDA #1
.160664	8f 9c 00 16	sta $16009c	                STA LEVEL
.160668	a9 ff		lda #$ff	                LDA #$FF
.16066a	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.16066e	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.160672	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.160676	8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.16067a	a9 ff		lda #$ff	                LDA #$FF
.16067c	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.160680	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.160684	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.160688	8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.16068c	60		rts		                RTS
>16068d	30 31 32 33 34 35 36 37		HEX_VALUES      .text '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
>160695	38 39 41 42 43 44 45 46
>16069d	00 01 03 06 10			BONUS           .text 0,1,3,6,$10
>1606a2	47 41 4d 45 20 4f 56 45		GAME_OVER_MSG   .text 'GAME OVER',0
>1606aa	52 00
>1606ac	53 43 4f 52 45 3a 00		SCORE_MSG       .text 'SCORE:',0
>1606b3	4c 45 56 45 4c 3a 00		LEVEL_MSG       .text 'LEVEL:',0
>1606ba	42 4f 4e 55 53 3a 20 20		BONUS_MSG       .text 'BONUS:  ',0
>1606c2	00
>1606c3	00 00				BYTE_CNTR       .word 0
.1606c5					BOARD
>1606c5	23				    .byte '#'
>1606c6	23				    .byte '#'
>1606c7	00				        .byte 0
>1606c8	00				        .byte 0
>1606c9	00				        .byte 0
>1606ca	00				        .byte 0
>1606cb	00				        .byte 0
>1606cc	00				        .byte 0
>1606cd	00				        .byte 0
>1606ce	00				        .byte 0
>1606cf	00				        .byte 0
>1606d0	00				        .byte 0
>1606d1	23				    .byte '#'
>1606d2	23				    .byte '#'
>1606d3	23				    .byte '#'
>1606d4	23				    .byte '#'
>1606d5	00				        .byte 0
>1606d6	00				        .byte 0
>1606d7	00				        .byte 0
>1606d8	00				        .byte 0
>1606d9	00				        .byte 0
>1606da	00				        .byte 0
>1606db	00				        .byte 0
>1606dc	00				        .byte 0
>1606dd	00				        .byte 0
>1606de	00				        .byte 0
>1606df	23				    .byte '#'
>1606e0	23				    .byte '#'
>1606e1	23				    .byte '#'
>1606e2	23				    .byte '#'
>1606e3	00				        .byte 0
>1606e4	00				        .byte 0
>1606e5	00				        .byte 0
>1606e6	00				        .byte 0
>1606e7	00				        .byte 0
>1606e8	00				        .byte 0
>1606e9	00				        .byte 0
>1606ea	00				        .byte 0
>1606eb	00				        .byte 0
>1606ec	00				        .byte 0
>1606ed	23				    .byte '#'
>1606ee	23				    .byte '#'
>1606ef	23				    .byte '#'
>1606f0	23				    .byte '#'
>1606f1	00				        .byte 0
>1606f2	00				        .byte 0
>1606f3	00				        .byte 0
>1606f4	00				        .byte 0
>1606f5	00				        .byte 0
>1606f6	00				        .byte 0
>1606f7	00				        .byte 0
>1606f8	00				        .byte 0
>1606f9	00				        .byte 0
>1606fa	00				        .byte 0
>1606fb	23				    .byte '#'
>1606fc	23				    .byte '#'
>1606fd	23				    .byte '#'
>1606fe	23				    .byte '#'
>1606ff	00				        .byte 0
>160700	00				        .byte 0
>160701	00				        .byte 0
>160702	00				        .byte 0
>160703	00				        .byte 0
>160704	00				        .byte 0
>160705	00				        .byte 0
>160706	00				        .byte 0
>160707	00				        .byte 0
>160708	00				        .byte 0
>160709	23				    .byte '#'
>16070a	23				    .byte '#'
>16070b	23				    .byte '#'
>16070c	23				    .byte '#'
>16070d	00				        .byte 0
>16070e	00				        .byte 0
>16070f	00				        .byte 0
>160710	00				        .byte 0
>160711	00				        .byte 0
>160712	00				        .byte 0
>160713	00				        .byte 0
>160714	00				        .byte 0
>160715	00				        .byte 0
>160716	00				        .byte 0
>160717	23				    .byte '#'
>160718	23				    .byte '#'
>160719	23				    .byte '#'
>16071a	23				    .byte '#'
>16071b	00				        .byte 0
>16071c	00				        .byte 0
>16071d	00				        .byte 0
>16071e	00				        .byte 0
>16071f	00				        .byte 0
>160720	00				        .byte 0
>160721	00				        .byte 0
>160722	00				        .byte 0
>160723	00				        .byte 0
>160724	00				        .byte 0
>160725	23				    .byte '#'
>160726	23				    .byte '#'
>160727	23				    .byte '#'
>160728	23				    .byte '#'
>160729	00				        .byte 0
>16072a	00				        .byte 0
>16072b	00				        .byte 0
>16072c	00				        .byte 0
>16072d	00				        .byte 0
>16072e	00				        .byte 0
>16072f	00				        .byte 0
>160730	00				        .byte 0
>160731	00				        .byte 0
>160732	00				        .byte 0
>160733	23				    .byte '#'
>160734	23				    .byte '#'
>160735	23				    .byte '#'
>160736	23				    .byte '#'
>160737	00				        .byte 0
>160738	00				        .byte 0
>160739	00				        .byte 0
>16073a	00				        .byte 0
>16073b	00				        .byte 0
>16073c	00				        .byte 0
>16073d	00				        .byte 0
>16073e	00				        .byte 0
>16073f	00				        .byte 0
>160740	00				        .byte 0
>160741	23				    .byte '#'
>160742	23				    .byte '#'
>160743	23				    .byte '#'
>160744	23				    .byte '#'
>160745	00				        .byte 0
>160746	00				        .byte 0
>160747	00				        .byte 0
>160748	00				        .byte 0
>160749	00				        .byte 0
>16074a	00				        .byte 0
>16074b	00				        .byte 0
>16074c	00				        .byte 0
>16074d	00				        .byte 0
>16074e	00				        .byte 0
>16074f	23				    .byte '#'
>160750	23				    .byte '#'
>160751	23				    .byte '#'
>160752	23				    .byte '#'
>160753	00				        .byte 0
>160754	00				        .byte 0
>160755	00				        .byte 0
>160756	00				        .byte 0
>160757	00				        .byte 0
>160758	00				        .byte 0
>160759	00				        .byte 0
>16075a	00				        .byte 0
>16075b	00				        .byte 0
>16075c	00				        .byte 0
>16075d	23				    .byte '#'
>16075e	23				    .byte '#'
>16075f	23				    .byte '#'
>160760	23				    .byte '#'
>160761	00				        .byte 0
>160762	00				        .byte 0
>160763	00				        .byte 0
>160764	00				        .byte 0
>160765	00				        .byte 0
>160766	00				        .byte 0
>160767	00				        .byte 0
>160768	00				        .byte 0
>160769	00				        .byte 0
>16076a	00				        .byte 0
>16076b	23				    .byte '#'
>16076c	23				    .byte '#'
>16076d	23				    .byte '#'
>16076e	23				    .byte '#'
>16076f	00				        .byte 0
>160770	00				        .byte 0
>160771	00				        .byte 0
>160772	00				        .byte 0
>160773	00				        .byte 0
>160774	00				        .byte 0
>160775	00				        .byte 0
>160776	00				        .byte 0
>160777	00				        .byte 0
>160778	00				        .byte 0
>160779	23				    .byte '#'
>16077a	23				    .byte '#'
>16077b	23				    .byte '#'
>16077c	23				    .byte '#'
>16077d	00				        .byte 0
>16077e	00				        .byte 0
>16077f	00				        .byte 0
>160780	00				        .byte 0
>160781	00				        .byte 0
>160782	00				        .byte 0
>160783	00				        .byte 0
>160784	00				        .byte 0
>160785	00				        .byte 0
>160786	00				        .byte 0
>160787	23				    .byte '#'
>160788	23				    .byte '#'
>160789	23				    .byte '#'
>16078a	23				    .byte '#'
>16078b	00				        .byte 0
>16078c	00				        .byte 0
>16078d	00				        .byte 0
>16078e	00				        .byte 0
>16078f	00				        .byte 0
>160790	00				        .byte 0
>160791	00				        .byte 0
>160792	00				        .byte 0
>160793	00				        .byte 0
>160794	00				        .byte 0
>160795	23				    .byte '#'
>160796	23				    .byte '#'
>160797	23				    .byte '#'
>160798	23				    .byte '#'
>160799	00				        .byte 0
>16079a	00				        .byte 0
>16079b	00				        .byte 0
>16079c	00				        .byte 0
>16079d	00				        .byte 0
>16079e	00				        .byte 0
>16079f	00				        .byte 0
>1607a0	00				        .byte 0
>1607a1	00				        .byte 0
>1607a2	00				        .byte 0
>1607a3	23				    .byte '#'
>1607a4	23				    .byte '#'
>1607a5	23				    .byte '#'
>1607a6	23				    .byte '#'
>1607a7	00				        .byte 0
>1607a8	00				        .byte 0
>1607a9	00				        .byte 0
>1607aa	00				        .byte 0
>1607ab	00				        .byte 0
>1607ac	00				        .byte 0
>1607ad	00				        .byte 0
>1607ae	00				        .byte 0
>1607af	00				        .byte 0
>1607b0	00				        .byte 0
>1607b1	23				    .byte '#'
>1607b2	23				    .byte '#'
>1607b3	23				    .byte '#'
>1607b4	23				    .byte '#'
>1607b5	00				        .byte 0
>1607b6	00				        .byte 0
>1607b7	00				        .byte 0
>1607b8	00				        .byte 0
>1607b9	00				        .byte 0
>1607ba	00				        .byte 0
>1607bb	00				        .byte 0
>1607bc	00				        .byte 0
>1607bd	00				        .byte 0
>1607be	00				        .byte 0
>1607bf	23				    .byte '#'
>1607c0	23				    .byte '#'
>1607c1	23				    .byte '#'
>1607c2	23				    .byte '#'
>1607c3	00				        .byte 0
>1607c4	00				        .byte 0
>1607c5	00				        .byte 0
>1607c6	00				        .byte 0
>1607c7	00				        .byte 0
>1607c8	00				        .byte 0
>1607c9	00				        .byte 0
>1607ca	00				        .byte 0
>1607cb	00				        .byte 0
>1607cc	00				        .byte 0
>1607cd	23				    .byte '#'
>1607ce	23				    .byte '#'
>1607cf	23				    .byte '#'
>1607d0	23				    .byte '#'
>1607d1	00				        .byte 0
>1607d2	00				        .byte 0
>1607d3	00				        .byte 0
>1607d4	00				        .byte 0
>1607d5	00				        .byte 0
>1607d6	00				        .byte 0
>1607d7	00				        .byte 0
>1607d8	00				        .byte 0
>1607d9	00				        .byte 0
>1607da	00				        .byte 0
>1607db	23				    .byte '#'
>1607dc	23				    .byte '#'
>1607dd	23				    .byte '#'
>1607de	23				    .byte '#'
>1607df	23				    .byte '#'
>1607e0	23				    .byte '#'
>1607e1	23				    .byte '#'
>1607e2	23				    .byte '#'
>1607e3	23				    .byte '#'
>1607e4	23				    .byte '#'
>1607e5	23				    .byte '#'
>1607e6	23				    .byte '#'
>1607e7	23				    .byte '#'
>1607e8	23				    .byte '#'
>1607e9	23				    .byte '#'
>1607ea	23				    .byte '#'
.1607eb					PIECE0
>1607eb	00 00 01 00			    .byte 0,0,1,0
>1607ef	00 00 01 00			    .byte 0,0,1,0
>1607f3	00 00 01 00			    .byte 0,0,1,0
>1607f7	00 00 01 00			    .byte 0,0,1,0
.1607fb					PIECE1
>1607fb	00 01 01 00			    .byte 0,1,1,0
>1607ff	00 01 01 00			    .byte 0,1,1,0
>160803	00 00 00 00			    .byte 0,0,0,0
>160807	00 00 00 00			    .byte 0,0,0,0
.16080b					PIECE2
>16080b	00 01 00 00			    .byte 0,1,0,0
>16080f	00 01 00 00			    .byte 0,1,0,0
>160813	00 01 01 00			    .byte 0,1,1,0
>160817	00 00 00 00			    .byte 0,0,0,0
.16081b					PIECE3
>16081b	00 00 01 00			    .byte 0,0,1,0
>16081f	00 00 01 00			    .byte 0,0,1,0
>160823	00 01 01 00			    .byte 0,1,1,0
>160827	00 00 00 00			    .byte 0,0,0,0
.16082b					PIECE4
>16082b	00 00 01 00			    .byte 0,0,1,0
>16082f	00 01 01 00			    .byte 0,1,1,0
>160833	00 00 01 00			    .byte 0,0,1,0
>160837	00 00 00 00			    .byte 0,0,0,0
.16083b					PIECE5
>16083b	00 00 01 00			    .byte 0,0,1,0
>16083f	00 01 01 00			    .byte 0,1,1,0
>160843	00 01 00 00			    .byte 0,1,0,0
>160847	00 00 00 00			    .byte 0,0,0,0
.16084b					PIECE6
>16084b	00 01 00 00			    .byte 0,1,0,0
>16084f	00 01 01 00			    .byte 0,1,1,0
>160853	00 00 01 00			    .byte 0,0,1,0
>160857	00 00 00 00			    .byte 0,0,0,0

;******  End of listing
